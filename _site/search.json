[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "lavaangui",
    "section": "",
    "text": "Tip\n\n\n\nlavaangui is currently still under development. Thus, please do not use it yet.\nThe lavaangui package provides a free, open-source graphical user interface for the lavaan package. The core feature is that models can be specified by drawing path diagrams and fitted models visualized via interactive path diagrams.\nThere are multiple ways to use the lavaangui package."
  },
  {
    "objectID": "tutorial/before.html",
    "href": "tutorial/before.html",
    "title": "Limitations",
    "section": "",
    "text": "Beyond the limitations of lavaan, some features are not available (yet) in lavaangui:\n\nSupport for variable types other than continuous\nLikelihood ratio tests for model comparison\nMulti-group models\nDefined parameters\n\nWe hope to add these features to lavaangui in the future. In case you need these features right away, we can recommend the following alternatives\n\nCreate the model in lavaangui, export the script and use lavaan directly in R.\nUse Onyx instead. This is an alternative graphical structural equation modeling package, offering most of these features. The main downsides compared to lavaangui is that it is external standalone software requiring administrator privileges to be installed on most computers, and is not optimized for lavaan.\nIf you are looking for an alternative for plotting (plot_interactive), consider using semPlot, lavaanPlot, or tidySEM. The main downside is that the created visualizations are not interactive. The main upside is that it is easier to make to the creation of diagrams more reproducible.\n\nThe lavaangui package is free open-source software. This means (among other things) that there is no warranty whatsoever. On the other hand, you can verify the source code yourself: https://github.com/karchjd/lavaangui/"
  },
  {
    "objectID": "tutorial/loading_data.html",
    "href": "tutorial/loading_data.html",
    "title": "Loading Data",
    "section": "",
    "text": "To load data, navigate to File &gt; Load Data in the Main Menu and select the file that contains your data. Supported formats are .xlsx, .sav, .rds, and .csv. Ensure that your data file contains a table of data.\nIf you just want to try lavaangui, you can use cfa.csv. This is a ‘classical’ dataset commonly used in many papers and books on structural equation modeling. See the lavaan tutorial for more information.\nCurrently, your .csv file must have the same format as cfa.csv. That is, the first row must contain variable names, columns are separated by ,, and the decimal delimiter is .."
  },
  {
    "objectID": "tutorial/loading_data.html#inspecting-data",
    "href": "tutorial/loading_data.html#inspecting-data",
    "title": "Loading Data",
    "section": "Inspecting Data",
    "text": "Inspecting Data\nAfter loading the data, the Data Viewer will become enabled. Click on Data Viewer to see summary statistics for each variable. Verify that these statistics align with your expectations, particularly for the variables you intend to model, to confirm that the data has been loaded correctly."
  },
  {
    "objectID": "tutorial/loading_data.html#renaming-variables",
    "href": "tutorial/loading_data.html#renaming-variables",
    "title": "Loading Data",
    "section": "Renaming Variables",
    "text": "Renaming Variables\nMuch like Lavaan, graphicalLavaan identifies observed variables in your model by their names. As a subsequent step, ensure you rename the variables so they have the desired names in your model. You can accomplish this within the Data Viewer by altering the variable names. Confirm the renaming by pressing OK."
  },
  {
    "objectID": "tutorial/loading_data.html#exercise",
    "href": "tutorial/loading_data.html#exercise",
    "title": "Loading Data",
    "section": "Exercise",
    "text": "Exercise\nAs an exercise, load the cfa.csv file that you can download here: XXX. Verify that it has been loaded correctly."
  },
  {
    "objectID": "tutorial/loading_data.html#next-steps",
    "href": "tutorial/loading_data.html#next-steps",
    "title": "Loading Data",
    "section": "Next Steps",
    "text": "Next Steps\nThe next step involves specifying a model."
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "Contribute",
    "section": "",
    "text": "An easy way to contribute is to request a new feature that you need for your work. To do this, please use https://github.com/karchjd/lavaangui/issues."
  },
  {
    "objectID": "contribute.html#bug-reports",
    "href": "contribute.html#bug-reports",
    "title": "Contribute",
    "section": "Bug Reports",
    "text": "Bug Reports\nSimilarly, if you find a bug, please also provide a bug report at https://github.com/karchjd/lavaangui/issues."
  },
  {
    "objectID": "contribute.html#contribute-code",
    "href": "contribute.html#contribute-code",
    "title": "Contribute",
    "section": "Contribute Code",
    "text": "Contribute Code\nSince lavaangui is open-source, everybody is invited to work on lavaangui. You can contribute as usual, via pull requests."
  },
  {
    "objectID": "contribute.html#tech-stack",
    "href": "contribute.html#tech-stack",
    "title": "Contribute",
    "section": "Tech Stack",
    "text": "Tech Stack\nWhile to a user lavaangui looks like any other shiny app, its Tech Stack is substantially more complicated than a typical shiny app. Below, I list the main technologies used for potential contributors:\n\nFrontend:\n\nJavascript + HTML + CSS: The front-end of lavaangui is entirely written in HTML, Javascript, and CSS. There is no R code in the front-end.\nSvelte: The frontend framework employed for its reactive programming capabilities, reusable components, state management, etc.\nCytoscape.js: The graph library enabling all graph interactions.\nBootstrap 3: Responsible for the visual style and chosen because it is also employed by shiny.\n\n\n\nBackend:\nThe backend is rather small and entirely written in R, making server contributions relatively straightforward.\n\n\nTesting and Deployment:\n\nPlaywright for (end-to-end) testing.\nGitHub Actions for CI/CD.\n\n\n\nDocumentation:\nThis website has been created with quarto."
  },
  {
    "objectID": "contribute.html#getting-started",
    "href": "contribute.html#getting-started",
    "title": "Contribute",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, use GitHub to create a fork. Then, create a local clone of your repository.\nInstall dependencies:\n\nNode.js\nR\nFront-end dependencies: Run npm run install from a shell in the src/ folder.\nBack-end dependencies: Execute devtools::install_local(dependencies = TRUE) in R, with the working directory set to the root folder of the package.\n\nThe file https://github.com/karchjd/lavaangui/blob/main/dev/compile_restart_dev.R compiles the front-end and starts the app locally in your browser."
  },
  {
    "objectID": "tutorial/model_specification.html#overview",
    "href": "tutorial/model_specification.html#overview",
    "title": "Model Specification",
    "section": "",
    "text": "As is typical in latent variable modeling, a model is specified by creating a set of nodes, which represent the variables, and connecting those with arrows, which represent the hypothesized relationships between the variables."
  },
  {
    "objectID": "tutorial/model_specification.html#creating-variables",
    "href": "tutorial/model_specification.html#creating-variables",
    "title": "Model Specification",
    "section": "Creating Variables",
    "text": "Creating Variables\ngraphical lavaan known 3 types of variables: observed variables, latent variables, and the constant variable, represented as squared, circle, or triangle, respectively. There are three ways to create variables\n\nClick on the respective item in the toolbox (see Figure XXX). This creates a corresponding variable at a random position in the graph.\nRight clicking anywhere in the model window (but not on an existing edge or node) and selecting the desired variabel. This create a correspondig variable at the cursor location.\nPressing either, “o” (observed variable), “l” (latent variable), or “c” (constant) variable. This also creates a corresponding variable at the cursor location."
  },
  {
    "objectID": "tutorial/model_specification.html#linking-variables-to-data",
    "href": "tutorial/model_specification.html#linking-variables-to-data",
    "title": "Model Specification",
    "section": "Linking Variables to Data",
    "text": "Linking Variables to Data\nTo fit a model, all observed variables must be linked to a variable in the data set. To link an observed variable node, give it the name of a variable in your data. This can be achieved by right-clicking the respective variable node and, selecting Rename Variable and then selecting from the variable names in the data set. After successfully linking a variable to a column in your data, you will get a success message in the Message Area and the border of the variable will become black, instead of grey."
  },
  {
    "objectID": "tutorial/model_specification.html#paths",
    "href": "tutorial/model_specification.html#paths",
    "title": "Model Specification",
    "section": "Paths",
    "text": "Paths\nRegression relationships between variables are represented by directed arrows, whereas variances and covariance relationships are represened by undirected arrows. To draw a direct arrow press and hold the ctrl button and drag the mouse from one variable (the start of the arrow) to another (the end of the arrow). If you hold the shift key instead of the ctrl key you create a undirect arrow instead.\nThe context menu of an arrow, reachable by right-clicking on the arrow, contains arrow-related operations: You can decide whether the path coefficient should be fixed (“Fix Parameter”), declared to be freely estimated (“Free Parameter”) or forced to be estimated (“Force Free Parameter”). Visually a free arrow is displayed as normal arrow, a fixed arrow contains @x as label, where x is the valued it is fixed to and a force free arrow is blue. The difference between a free parameter and a force free parameter is that the latter prevents lavaan from fixing the parameter, as would for example be the case if the would correspond to the first loading of a latent factor. You can also change revert the direction of an arrow (“Revert Direction”), set a directed arrow to undirected (“Set Undirected”), or set a undirect arrow to directed (“Set Directed”). Another important operation is to give a path coefficient a label “Add/Change Label”. Labels are used to implement parameter contraints. Two path coefficients with the same label will constrained to be equal during estimation."
  },
  {
    "objectID": "tutorial/model_specification.html#changing-model-appearance",
    "href": "tutorial/model_specification.html#changing-model-appearance",
    "title": "Model Specification",
    "section": "Changing Model Appearance",
    "text": "Changing Model Appearance\nYou can drag variables around with the mouse to change the appearance of your model. For more advanced features, see Apperance."
  },
  {
    "objectID": "tutorial/model_specification.html#model-auto-complete",
    "href": "tutorial/model_specification.html#model-auto-complete",
    "title": "Model Specification",
    "section": "Model Auto Complete",
    "text": "Model Auto Complete\nJust like lavaan graphicalLavaan tries its best to autocomplete a model. Thus, instead of having to draw each and every arrow of a model graphicaLavaan automatically adds arrows when it is reasonably certain that you want to included them in the model. Thus, if for example you want to create a one factor model with three factors you can simply draw the model shown in Figure XXX, instead of the actual complete one-factor model shown in Figure XXX."
  },
  {
    "objectID": "tutorial/model_specification.html#exercise",
    "href": "tutorial/model_specification.html#exercise",
    "title": "Model Specification",
    "section": "Exercise:",
    "text": "Exercise:\nFirst, make sure that the cfa.csv data set is loaded (see XXX). Draw the following confirmatory factor model SEM:\n\n\n\n\n\n\n\n\nA 3 factor CFA example"
  },
  {
    "objectID": "tutorial/result.html",
    "href": "tutorial/result.html",
    "title": "Inspecting Results",
    "section": "",
    "text": "The parameter estimates are automatically shown in the path diagram after the model has been fitted. You can change what is displayed in the View Menu. The remaining results are displayed in the Results Window."
  },
  {
    "objectID": "tutorial/index.html",
    "href": "tutorial/index.html",
    "title": "Overview",
    "section": "",
    "text": "In this tutorial, we will explain the basics of lavaangui"
  },
  {
    "objectID": "tutorial/save.html",
    "href": "tutorial/save.html",
    "title": "Saving and Exporting",
    "section": "",
    "text": "After completing an analysis, you may want to save it and share the results."
  },
  {
    "objectID": "tutorial/save.html#saving-model",
    "href": "tutorial/save.html#saving-model",
    "title": "Exporting and Saving a Model",
    "section": "Saving Model",
    "text": "Saving Model\nYou can save the analysis (model + and data) via the option File &gt; Download Model and Data. You can load the analysis in the future via File &gt; Load Model and Data. You can also only save the Model via File &gt; Download Model and load it again via File &gt; Load Model"
  },
  {
    "objectID": "tutorial/save.html#exporting-graph",
    "href": "tutorial/save.html#exporting-graph",
    "title": "Exporting and Saving a Model",
    "section": "Exporting Graph",
    "text": "Exporting Graph\nThere are two options to export the graph, for example, to include it in a publication: Export Model to PNG and Export Model to JPG in the file menu. Both should be self-explanatory."
  },
  {
    "objectID": "tutorial/appearance.html",
    "href": "tutorial/appearance.html",
    "title": "Changing Diagram Appearance",
    "section": "",
    "text": "There are multiple approaches to change the appearance of the path diagram."
  },
  {
    "objectID": "tutorial/appearance.html#moving-nodes",
    "href": "tutorial/appearance.html#moving-nodes",
    "title": "Changing Diagram Appearance",
    "section": "Moving Nodes",
    "text": "Moving Nodes\nFirst, you can manually move nodes by dragging them around with your mouse. To reposition the entire graph, click on an empty space and drag the graph around with your mouse. Alternatively, you can use the arrows at the top left corner of the Model Window. To select multiple nodes for dragging, press CTRL. This activates a selection rectangle. You can also hold CTRL while clicking on multiple nodes to select them all."
  },
  {
    "objectID": "tutorial/appearance.html#automatic-layouts",
    "href": "tutorial/appearance.html#automatic-layouts",
    "title": "Changing Diagram Appearance",
    "section": "Automatic Layouts",
    "text": "Automatic Layouts\nYou can apply automatic layouts to your path diagram via the Apply Layout menu. The first two options should yield good results for a variety of models. If you dislike the changes a layout applied, you can undo them by pressing CTRL+Z. I recommend starting with one of the two suggested layouts and then fine-tuning the diagram manually."
  },
  {
    "objectID": "tutorial/appearance.html#changing-variances-arrows",
    "href": "tutorial/appearance.html#changing-variances-arrows",
    "title": "Changing Graph Appearance",
    "section": "Changing Variances Arrows",
    "text": "Changing Variances Arrows\ngraphicalLavaan tries its best to automatically find a good position for the variance loops such that they do not overlap with other arrows (conntected to the same variable node). This will not lead to a good result for all models. You can manually position a variance loop via its context menu (“Fix Loop Orientation”). Just as for parameter values, you can also free the loop orientation again to tell graphicalLavaan to automatically find the best orientation again."
  },
  {
    "objectID": "tutorial/appearance.html#changing-covariance-arrows",
    "href": "tutorial/appearance.html#changing-covariance-arrows",
    "title": "Changing Diagram Appearance",
    "section": "Changing Covariance Arrows",
    "text": "Changing Covariance Arrows\nCovariance arrows appear as curved arrows. To improve their appearance, you may need to alter the curvature of an arrow (making it straighter or more curved). This can be done by right-clicking on an undirected arrow and selecting Change Curvature."
  },
  {
    "objectID": "tutorial/appearance.html#zooming",
    "href": "tutorial/appearance.html#zooming",
    "title": "Changing Diagram Appearance",
    "section": "Zooming",
    "text": "Zooming\nZoom in or out of the diagram using your mouse wheel or laptop trackpad. Alternatively, use the zoom slider in the top left corner of the Model Window. The button between the zoom sliders and the moving arrows automatically adjusts the zoom level so that the diagram fills the entire Model Window."
  },
  {
    "objectID": "tutorial/means.html",
    "href": "tutorial/means.html",
    "title": "Means",
    "section": "",
    "text": "By and large, structural equation models are used to model the covariance matrix of the observed variables in a dataset. But in some applications, it is useful to bring in the means of the observed variables too. One way to do this is to simply a constant variable in the model. A typical example would be the growth model shown below XXX.\nAnother alternative, in graphicalLavaan is to ask graphicalLavaan to automatically add means to the model. This can be done by going to Mean Options-> Model Means? and selecting Yes. Afterwards the two other menu options in Mean Options can be used to decide what means should be added to the model. Again also for this case, we recommend using Show Full model to ensure that graphicalLavaan does the thing you intended.\nThe Add intercepts menu options also can have an effect when model means is set an automatic. In automatic lavaan decides whether to include models or not based on the model. On important case is when the model contains a constant variable, in which means are added to the model and the Add intercept options will have an effect. Again, also check the Full Model before fitting any model.\nThe mean status bar in the top toolboar always informs you whether means are being modeled or not."
  },
  {
    "objectID": "tutorial/fitting.html",
    "href": "tutorial/fitting.html",
    "title": "Model Fitting",
    "section": "",
    "text": "To fit a SEM, you first need to make sure that each observed variable in the model is linked with a variable in the data set. Before fitting the model, I recommend that you ensure that the model is exactly what you want. This is especially important for lavaangui because it automatically adds many arrows. So, the model you specify is almost always not the exactly the same model that is fitted by lavaan.\nTo obtain the model lavaan will use, press on the Show Full Model button in the Bottom Toolbar. This will add all the arrows lavaan automatically adds to your model and fixes all parameters lavaan will fix. All arrows added or modified are displayed as dashed arrows."
  },
  {
    "objectID": "tutorial/fitting.html#select-estimators",
    "href": "tutorial/fitting.html#select-estimators",
    "title": "Model Fitting",
    "section": "Select Estimators",
    "text": "Select Estimators\nBefore fitting make sure to select the desired estimator, test statistic, and standard errors via the Estimation menu. In the estimation menu, you can also change how missing values are treated."
  },
  {
    "objectID": "tutorial/fitting.html#fit-model",
    "href": "tutorial/fitting.html#fit-model",
    "title": "Model Fitting",
    "section": "Fit Model",
    "text": "Fit Model\nWhen you are certain that the full model is the model you want to fit, press on the Fit Model button in the Bottom Toolbar. After succesfully fitting the model, the parameter estimates are automatically displayed in the model path diagram. Should the model fitting take too long, you can press on cancel to abort.\nlavaangui caches parameter estimates. Thus, when you decide to fit a model again but did not change the model or the data, the model will actually not be fit again, but instead previously saved results will be used."
  },
  {
    "objectID": "about/features.html",
    "href": "about/features.html",
    "title": "Features",
    "section": "",
    "text": "lavaan is reliable, open and extensible\n\nby default, lavaan implements the textbook/paper formulas, so there are no surprises\nlavaan can mimic many results of several commercial packages (including Mplus and Eqs using the mimic=\"Mplus\" or mimic=\"EQS\" arguments)\nlavaan is not a black box: you can browse the source code on GitHub\nlavaan can be extended: see the Related Projects page for extensions and add-ons.\n\n\n\nlavaan is easy and intuitive to use\n\nthe ‘lavaan model syntax’ allows users to express their models in a compact, elegant and useR-friendly way; for example, a typical CFA analysis looks as follows:\n\n\nlibrary(lavaan)\nmyData <- read.csv(\"/path/to/mydata/myData.csv\")\nmyModel <- ' \n    f1 =~ item1 + item2 + item3\n    f2 =~ item4 + item5 + item6\n    f3 =~ item7 + item8 + item9\n'\nfit <- cfa(model = myModel, data = myData)\nsummary(fit, fit.measures = TRUE)\n\n\nyou can choose between a user-friendly interface in combination with the fitting functions cfa() and sem() or a low-level interface using the fitting function lavaan() where ‘defaults’ do not get in the way\nconvenient arguments (eg. group.equal=\"loadings\") simplify many common tasks (eg. measurement invariance testing)\nlavaan outputs all the information you need: a large number of fit measures, modification indices, standardized solutions, and technical information that is stored in a fitted lavaan object\n\n\n\nlavaan provides many advanced options\n\nfull support for meanstructures and multiple groups\nseveral estimators are available: ML (and robust variants MLM, MLMV, MLR), GLS, WLS (and robust variants DWLS, WLSM, WLSMV), ULS (ULSM, ULMV), DLS, and pairwise ML (PML)\nstandard errors: standard, robust/huber-white/sandwich, bootstrap\ntest statistics: standard, Satorra-Bentler, Yuan-Bentler, Satterthwaite, scaled-shifted, Bollen-Stine bootstrap\nmissing data: FIML estimation\nlinear and nonlinear equality and inequality constraints\nfull support for analyzing categorical data: lavaan (from version 0.5 onwards) can handle any mixture of binary, ordinal and continuous observed variables\n(from version 0.6 onwards): support for multilevel level SEM"
  },
  {
    "objectID": "about/support.html",
    "href": "about/support.html",
    "title": "Support",
    "section": "",
    "text": "Asking for help\nIf you are looking for help, please do not email me directly. Please use the lavaan discussion group instead.\n\n\nlavaan discussion group\nIf you have questions about the use of lavaan, or if you would like to discuss various aspects about the lavaan package, please join the the lavaan discussion group:\nhttps://groups.google.com/d/forum/lavaan\nOnce you have joined the group, you can email your questions (or opinions) to lavaan@googlegroups.com\nThis discussion group is the main hub for the lavaan community. Announcements related to lavaan will be posted there first. And discussions may lead to changes in the lavaan code. The discussion group is archived, and can be searched. It is always wise to check the archives first, before posting.\n\n\nReporting bugs\nIf you have found a (possible) bug, please report it. You can either:\n\nemail me directly (Yves.Rosseel@UGent.be) (to alert me)\ncreate an issue on GitHub (to remind me, once we have agreed it is a bug)\n\nBut please, always include a reproducible example containing an R script, and a snippet of your data (just enough to reproduce the issue). And make sure you are using the latest version of lavaan.\nAll verified bugs (and other reported issues) are listed in the version history."
  },
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "About",
    "section": "",
    "text": "Who wrote lavaan?\nThe main developer of lavaan is: Yves Rosseel\nIf you have questions about the use of lavaan, please do not email me directly, but use the discussion group: https://groups.google.com/d/forum/lavaan\n\n\nCode contributors\nSeveral people have contributed source code to the lavaan project:\n\nTerrence Jorgensen\nNicholas Rockwood (multilevel SEM with random slopes)\nDaniel Oberski (Delta matrix, EPC, github; see also the lavaan.survey package)\nJarrett Byrnes (sem-additions, Satorra-Bentler, formative constructs)\nLeonard Vanbrabant (the InformationTesting() function and parts of the bootstrapLRT() function; see also the restriktor package)\nVictoria Savalei (R code for missing data and the Yuan-Bentler test statistic)\nEd Merkle (added type=“yuan” in the bootstrapLavaan() function; see also the blavaan package)\nMichael Hallquist (mplus2lavaan)\nMijke Rhemtulla (R code for computing the fraction of missing information (fmi))\nMyrsini Katsikatsou (estimator = “PML”)\nMariska Barendse (lavTablesFitCm, lavTablesFitCp, lavTablesFitCf)\nFlorian Scharf (ESEM)\nHan Du (estimator = “DLS”)\n\n\n\nThanks\nSince the release of version 0.3-1, many people have provided valuable feedback, comments and suggestions. Below is an (incomplete) list of people that somehow contributed to the (early) development of lavaan:\n\nAnne Boomsma, Joerg Evermann and Jarrett Byrnes tested the early versions and gave valuable feedback (2010)\nGerhard Arminger provided the MECOSA source code, written in the GAUSS language (2010)\nRens van de Schoot for allowing me to present at the Mplus user meeting in 2010 and sending Leonard Vanbrabant to Ghent in 2011)\nThe Psychoco organizers (for inviting me in 2011, leading to the JSS paper in 2012)\nMichael Hallquist (author of the MplusAutomation package, initially used for testing lavaan)\nSacha Epskamp (author of the qgraph and semPlot packages with great support for lavaan)\nTodd Little for inviting me to Kansas in 2012, where we met Sunthud, Terrence, and Alexander, and where the idea of semTools was born\nRolf Steyer for inviting me to Jena in 2012, where I met Axel Mayer, and introducing me to EffectLite\nfeedback and suggestions from Alberto Maydeu-Olivares, Alexander Robitzsch, Alexander Schoemann, David Kaplan, David Kenny, Paul De Boeck, Michael Eid, Eric Klopp, Felix Schönbrodt, Njål Foldnes, Francis Tuerlinckx, Fred Oswald, Mauricio Garnier-Villarreal, Moritz Heene, Herbert Hoijtink, Holendro Singh, Holger Steinmetz, Jack McArdle, James Grace, James Steiger, Keith Widaman, Kentaro Hayashi, Mikko Rönkkö, Paul Johnson, Sunthud Pornprasertmanit and many, many others.\n\n\n\nLicense\nThe lavaan package is licensed under the GNU General Public License Version >= 2\n\n\nFunding\nThe lavaan project is not funded, and is solely the work of volunteers.\n\n\nContact\nEmail: Yves.Rosseel@UGent.be"
  },
  {
    "objectID": "about/donate.html",
    "href": "about/donate.html",
    "title": "Donate",
    "section": "",
    "text": "lavaan is free\nThe lavaan package is free (as in beer) and open-source. We very much plan to keep it that way. But the bus factor of the lavaan project is (currently) one, and the main developer (Yves Rosseel) finds it increasingly more difficult to find time to maintain (let alone further develop) lavaan.\nAt the same time, the user base of lavaan is expanding rapidly, and lavaan has become ‘critical software’ in many research domains.\nThis situation is inherently unsustainable, and we are looking for ways to hire more staff to support the lavaan project. One avenue is to ask for donations.\n\n\nDonations\nFrom 1 July 2023 onwards, it is possible to donate money to the lavaan project. The money will go to Ghent University, and will be used exclusively to hire qualified staff (at the post-doc level) that will support the lavaan project.\nAt the end of the year, we will list all individuals/projects/businesses/organizations that have made a donation (unless they opt out) on this website.\n\n\nWhat are the donations for?\nOur initial goal is to raise about 120,000 euro (the gross salary of a post-doc in Flanders) to hire a qualified person for 1 full year (hopefully, starting early 2024).\nThis person will assist the main developer to:\n\ncreate high-quality documentation for users,\ncreate detailed technical documentation (matching the code), and\ncreate a public cloud-based quality-testing platform to ensure the correctness of the lavaan output (in particular after a new update).\nadd new features to lavaan\n\n\n\nHow to make a donation\nDonations can be made using the following link (note: you will be redirected to the domain actieplatform.ugent.be):\n\n\nDONATE for lavaan\n\n\n\nThe following payment methods are available: Bancontact, VISA, iDEAL, Maestro, Mastercard, Belfius Pay Button, KBC/CBC Pay Button.\nIf you prefer using a bank transfer, please use the following details:\n\nBeneficiary: UNIVERSITEIT GENT\nIBAN: BE26 3900 9658 0329 (remove spaces if necessary)\nSwift code (BIC): BBRUBEBB\nBank reference: FWUGENTPP1226\n\nFor more information about the donation process, tax certificates, etcetera, please contact the friendly people of the University Fund of Ghent University.\n\n\nResearch project/grant money\nIf you have received a research project grant and are currently utilizing lavaan in your research, we kindly request that you contemplate contributing a financial contribution to support the lavaan project.\nPlease be aware that most funding agencies do not permit the use of project funds for donations. Nevertheless, you have the option to make a voluntary payment for ‘lavaan support,’ and we can provide you with an official invoice upon request. To proceed with this, kindly get in touch with Isabelle Saelens (email: Isabelle.Saelens@UGent.be), who will provide you with additional guidance."
  },
  {
    "objectID": "about/gettingstarted.html",
    "href": "about/gettingstarted.html",
    "title": "Getting started",
    "section": "",
    "text": "The easiest way to use lavaangui is to go to https://lavaangui.org/ and start modeling. The only prerequesite is a modern web browser. lavaangui is continuously tested on Chrome, Firefox, Safari, and Edge. (TODO add versions)"
  },
  {
    "objectID": "about/gettingstarted.html#r-package",
    "href": "about/gettingstarted.html#r-package",
    "title": "Getting started",
    "section": "R Package",
    "text": "R Package\n\nInstall R\nlavaangui is implemented as a Shiny R package. This means that before installing lavaan, you should have installed a recent version (>= 4.0.0) of R. You can download the latest version of R from the R-project website.\n\n\nInstall lavaangui\nOnce you have installed R, you can install the lavaangui package simply by starting up R, and typing\n\ninstall.packages(\"lavaangui\")\n\nTo check if the installation was succesful, you can load the lavaangui package and start the graphical user interface.\n\nlibrary(lavaan)\nstart_gui()\n\nIf this opens the interface in your webbrowser, everything is set up and ready.\n\n\nGetting Started\nNow that you have installed lavaan, you can:\n\nread the lavaan tutorial; either online or as a PDF\nread the lavaan paper"
  },
  {
    "objectID": "about/development.html",
    "href": "about/development.html",
    "title": "Development",
    "section": "",
    "text": "Installing the development version of lavaan\nIf you have not installed lavaan before, first install the current version of lavaan and all of its dependencies. Then, to install the latest development version of lavaan, you can type at the R prompt:\n\nlibrary(remotes)\nremotes::install_github(\"yrosseel/lavaan\")\n\nTo make sure you are using the newly installed version of lavaan, restart your R session. If you want to revert to the official (CRAN) version of lavaan again, simply type\n\ninstall.packages(\"lavaan\")\n\nand you will back to the official version. Again, you may need to restart your R session.\n\n\nlavaan source code\nAll development of lavaan happens on GitHub. If you want to download (or clone) the lavaan source code, or if you simply want to browse through the source code, go to the lavaan github page:\nhttps://github.com/yrosseel/lavaan\nIf you click on the commits tab, you can see all the recent changes that have been committed.\n\n\nDevelopment notes\nHere, I will publish some notes that document important changes from version to version (or perhaps possible changes that are not implemented yet). I welcome any comments or suggestions on these notes.\n\nhandling linear equality constraints in lavaan 0.5-18 (compared to 0.5-17 and lower)\n\n\n\nFuture plans\nToo many. Eventually, we will get (most) of the features of LISREL/Mplus/gllamm/… in lavaan. But it takes time. Please do not ask me when a feature will be ready. I have no idea.\nFeatures that are planned for future updates within the 0.6 series:\n\nexploratory SEM (ESEM) and exploratory factor analysis (EFA) (available in 0.6-8)\ntwo-level SEM with random slopes\nfiml for two-level SEM (to handle missing values) (available in 0.6-9)\naccelerated EM\nstructural after measurement (SAM) estimation strategies (available in 0.6-9)\n\nOther plans for future releases:\n\nbetter support for models with NO latent variables\nnon-iterative estimators, James-Stein type shrinkage estimators\nimproved small sample inference\nmultilevel SEM with categorical data (using adaptive quadrature)\nsupport for discrete latent variables (aka mixture modeling, latent class analysis)"
  },
  {
    "objectID": "history/dot5.html",
    "href": "history/dot5.html",
    "title": "0.5 series",
    "section": "",
    "text": "Version 0.5-23.1097\n\nReleased on CRAN: 24 February 2017\nNew features and user-visible changes:\n\nfactor scores (computed by lavPredict()) are now complete, even if the items contain missing values\nBartlett factor scores now handle singular lambda and theta matrices\nmplus2lavaan() function gains a run=FALSE argument (so it acts only as a syntax converter)\nnew function lavOptions() shows the default options used by the sem/cfa/lavaan functions; all these options are now described in a single man page (see ?lavOptions)\nnew functions semList(), cfaList() and lavaanList() allow for fitting the same model on multiple datasets\nthe (often many) warnings about empty cells in bivariate cells (when categorical data is used) are now replaced by a single warning, and lavInspect(fit, “zero.cell.tables”) can be used to see these tables\n\nKnown issues:\n\nsame as 0.5-19\n\nBugs/glitches discovered after the release:\n\nthe commit number (1097) was not stripped from the version number\nthe fit measure rni.scaled was using the naive baseline values for chisq and df\nwhen the model syntax contains only covariances (~~) (and perhaps intercepts), and some of the ~~ formulas correspond to values of the covariance matrix below the diagonal (instead of above), the order of the variable names in the final parameter table may be wrong; as a result, some of the variables in the extractor functions may be mislabeled; a symptom of this is that the output of lavNames(lavParseModelString(model.syntax)) is different from the output of lavNames(fit) (bug reported by Cory Costello)\nlavTestLRT() with method = “satorra.bentler.2010” is broken, often resulting in negative values for the test statistic\nscaled RMSEA value is wrong if mimic=“EQS” and test=“scaled.shifted” (but the confidence interval is still ok)\n\n\n\n\nVersion 0.5-22\n\nReleased on CRAN: 24 September 2016\nNew features and user-visible changes:\n\n(old) ‘scaled’ versions of CFI/TLI/RMSEA are again printed in the summary() output\nthe (new) robust versions of CFI/TLI/RMSEA are printed on separate lines\ninspect/lavInspect/lavTech gains a “residuals” option, for printing raw residuals between observed and model-implied sample statistics\ninspect/lavInspect/lavTech: options “sampstat”, “implied”, and “residuals” now consistently use the same names for the summary statistics (notably res.cov, res.int, res.slopes and res.th when conditional.x = TRUE)\n\nKnown issues:\n\nsame as 0.5-19\n\nBugs/glitches discovered after the release:\n\nlavCor() with output=“est” returns the unstandardized solution; therefore, when some variables were continuous, we got covariances instead of correlations\n\n\n\n\nVersion 0.5-21\n\nReleased on CRAN: 7 September 2016\nNew features and user-visible changes:\n\nrobust RMSEA and CFI values are now computed correctly, following Brosseau-Liard, P. E., Savalei, V., and Li, L. (2012), and Brosseau-Liard, P. E. and Savalei, V. (2014); in the output of fitMeasures(), the ‘new’ ones are called cfi.robust and rmsea.robust, while the ‘old’ ones are called cfi.scaled and rmsea.scaled\nSRMR is now displayed in the summary(, fit.measures = TRUE) output in the categorical case\nin the summary() output, a dot (.) is added in front of the names of endogenous intercepts, covariances and variances; this is mostly for teaching purposes, to distinguish between for example residual and plain variances; the ‘.’ prefix was the least obtrusive way I could think of; feedback about this is welcome\nthe inspect/lavInspect() function will now always return a nested list in the multiple group setting\nthe inspect/lavInspect() function with the “free” argument will now show a header with equality constraints (if any)\nGLS/WLS (and friends) now work when fixed.x = TRUE\na new argument conditional.x (TRUE/FALSE) can be used with all estimators (ML, GLS, (D)WLS)\na two-way interaction between observed variables can now be specified in the model syntax by using a colon, for example: y ~ x1 + x2 + x1:x2 and a product term will be created automatically\n\nKnown issues:\n\nsame as 0.5-19\n\nBugs/glitches discovered after the release:\n\nthe (new) robust CFI/TLI/RMSEA values as printed in the summary() output of version 0.5-21 (only) are wrong if (and only if) the test statistic is “mean.var.adjusted” or “scaled.shifted” (the latter is used when estimator = “WLSMV”, the default estimator in the categorical case)\n\n\n\n\nVersion 0.5-20\n\nReleased on CRAN: 7 November 2015\nNew features and user-visible changes:\n\nthis is mainly a small maintenance release, to ease the forthcoming updates of a few packages (blavaan, lavaan.survey, semTools)\nwhen the model is just a simple univariate regression, lavaan does no longer use an analytic shortcut (therefore, estimation may take much longer, in particular in the presence of (in)equality constraints)\nmore options have been added to lavTech/lavInspect, and the man page has been updated\nlavScores() and vcov() gain a new argument `remove.duplicated’, which is set to TRUE in the case of lavScores() (but not vcov); for lavScores(), this restores the behavior of <= 0.5-17 when only simple equality constraints are used in the model\n\nKnown issues:\n\nsame as 0.5-19\n\nBugs/glitches discovered after the release:\n\nwhen NACOV is provided as an argument, and mimic=“Mplus”, lavaan (wrongly) tries to ‘fix’ the G11 part of the NACOV matrix\nthe “?”-modifier (as shortcut for start()*) did not work in many settings (eg multiple groups)\ncombination of arguments se=“robust.sem” and information=“observed” was allowed and gave an error\nlavTestLRT(, method=“satorra.2000”) failed in the multiple group case\ncombination se=“robust” and esetimator=“ULS” did not work\nif data was a tiblle, lavaan would fail\nfabin.uni() fails when trying to invert a singular matrix\nWLS.VD was NULL when WLS.V was user-specified\nlavtable(,dim=1) gave wrong frequencies in the presence of empty cells\nlavInspect(,“information.first.order”) failed when the model was fitted without a meanstructure\nmodindices() failed if the information matrix is singular\n\n\n\n\nVersion 0.5-19\n\nReleased on CRAN: 3 October 2015\nNew features and user-visible changes:\n\nthe parameter estimates section of the summary() output has been redesigned: the section headers are now repeated, and the number of digits after the decimal point can be changed; eg. summary(fit, nd = 5)\nthe function modindices() will now only show modification indices for newly added parameters; to assess the impact of releasing equality constraints, use the function lavTestScore()\nnew function lavTestScore() allows for univariate and multivariate score tests (aka Lagrange Multiplier tests) for releasing (general) equality constraints\nthe output of parTable(fit) now fully reflects the changes described here\nlavPredict() now consistently ignores the structural component; it only computes values for latent variables and their indicators; if all variables are observed, the function simply returns the observed values\nlavTestLRT() gives a warning if the restricted model contains parameters that are free in the restricted model, but fixed in the full model\n\nKnown issues:\n\nmarginal ML limitations: same as 0.5-16, 0.5-17 and 0.5-18 (this will be addressed in 0.6)\nlav_partable_df() does not take the equality constraints into account, and does not handle the setting where the number of variables differs among groups in a multiple group analysis (this will be addressed in 0.6)\n\nBugs/glitches discovered after the release:\n\nin ill-conditioned settings, with equality constraints, NA may appear among the standard errors; this turned out to be a numerical issue, due to a rather conservative tolerance value when computing the generalized inverse\n\n\n\n\nVersion 0.5-18\n\nReleased on CRAN: 4 April 2015\nNew features and user-visible changes:\n\nhuge improvement in speed and stability when (many) linear equality constraints are used in the model; the details of the changes are described here\nnew function lavPredict() to compute predicted values for latent variables and observed variables\nmany low-level lav_matrix_* functions are now public\nmodindices() function has gained many filter options, including a sort= argument\nestimator = “PML” now provides a goodness-of-fit test (PLRT)\nmany new output options for the lavTech/lavInspect/inspect functions\n\nKnown issues:\n\nmarginal ML limitations: same as 0.5-16 and 0.5-17 (this will be addressed in 0.6)\nthe modification indices do not reflect (yet) what happens if an equality constraint is released; a warning is given in this case\nthe parameter table still contains the ‘unco’ and ‘eq.id’ columns, although they are not used anymore (they will be removed in 0.5-19)\nlav_partable_df() does not take the equality constraints into account\n\nBugs/glitches discovered after the release:\n\nlavTestLRT(,method = “sattora.2000”) gives the wrong result if the restricted model contains parameters that are free in the restricted model, but fixed in the full model; a typical example is when comparing the weak invariance versus the strong invariance model (the latent means are free in the strong invariance model)\nthe modifier c(NA,NA)* does not work (in a multiple group analysis)\nlabels for the augmented part in lavInspect(fit, “augmented.information”) are missing, resulting in an error\nthe post-estimation checks sometimes produce a false warning that the model-implied covariance matrix of the latent variables is non-positive definite (only when `dummy’ (phantom) latent variables are involved in the model)\ninspect(fit, “cov.lv”) had label issues when formative latent variables were involved\n\n\n\n\nVersion 0.5-17\n\nReleased on CRAN: 30 September 2014\nNew features and user-visible changes:\n\nthis is mainly a maintenance release\ntwo new functions: lavInspect() and lavTech() extend the familiar inspect() function (with more arguments); they now have a dedicated help page (see ?lavInspect)\nfor saturated models (df = 0), the p-value will always be ‘NA’ (instead of 1 or sometimes 0)\nmore low-level functions are now public: lav_partable_independence, lav_partable_unrestricted, lav_partable_npar, lav_partable_ndat, lav_partable_df, lav_func_gradient_complex, lav_func_gradient_simple, lav_func_jacobian_complex, lav_func_jacobian_simple\n\nKnown issues:\n\nmarginal ML limitations: same as 0.5-16\nmodindices() does not work in models with both explictit equality constraints (==), and label-based (or group.equal based) equality constraints\nresid(, “casewise”) fails in the presence of exogenous covariates\n\nBugs/glitches discovered after the release:\nresid(,“obs”) fails if the model contains exogenous covariates\nparameterization=“theta” does not work in a multiple group analysis if there are exogenous covariates in the model\nwhen a variable in the model syntax was called `label’, this would confuse the syntax parser\nmodindices() did not (alwayw) work when estimator = “WLS”\npc_cor_TS (the function computing polychoric correlations) could fail (integer overflow) in very large samples\nstd.all was wrong for covariances (“~~”) where the lhs was a factor, while the rhs was a observed variable (and hence fixed.x = FALSE)\nstd.ov = TRUE fails when the model contains (exactly) one exogenous variable\nstandard errors of standardized parameters (as shown in the output of the standardizedSolution() function) are mostly wrong, because they do not take the sampling variability of the latent variables into account\nlavTestLRT() does not warn (or throw an error) if the restricted model (H0) contains model parameters that are free in H0, but fixed in H1. A common example of this is in measurement invariance testing when testing for strong (versus weak) invariance (by default, the strong invariance model will free up the latent means). In combination with SB.classic = FALSE, the resulting test statistic is not correct (Note: 0.5-18 does not solve this, but issues a warning when H0 contains such free parameters). In general, SB.classic = FALSE only works correctly when the free parameters in H0 are a subset of the free parameters of H1.\n\n\n\nVersion 0.5-16\n\nReleased on CRAN: 7 March 2014\nNew features and user-visible changes:\n\nparameterization=“theta” is now available for categorical data\ninitial support for marginal maximum likelihood (estimator = “MML”)\nnew function lavTestLRT() to compare nested models using LRT; the anova() function is now just a wrapper around this function\nin both the anova() and lavTestLRT() function, SB.classic=TRUE is the default; to get the old behaviour, use SB.classic=FALSE\nnew function lavTestWald() allows for arbitrary Wald tests\nnew function lavCor() to compute polychoric/tetrachoric/… correlations directly from the data\nfitMeasures() gains a new baseline.model argument to allow for user-defined baseline models\nnew group.w.free argument allows the group weights to be treated as free parameters in a multiple group analysis\nnew functions lavTablesFitCf(), lavTablesFitCm(), lavTablesFitCp() provide three measures of fit for the PML method (contributed by Mariska Barendse)\nSRMR is now identical to the Mplus value if information = “observed”; the WRMR is added to the output if mimic = “Mplus”\nallow for zero iterations using control=list(optim.method=“none”) argument\n\nKnown issues:\n\nmarginal ML limitations: only works if we have latent variables; only probit metric; extremely slow (for now) if more than 2 dimensions; no documentation yet; only Gauss-Hermite quadrature\n\nBugs/glitches discovered after the release:\nsummary(fit, fit.measures=TRUE) gives error: object ‘logl.H1’ not found; this can occur if the columns of the data.frame are of type ‘matrix’ (instead of numeric/integer/factor/ordered)\npredict() with continuous observed variables fails in the presence of exogenous covariates\nwhen we have both continuous and categorical (endogenous) variables, the latter with more than 2 response categories, the signs of the thresholds/means are reversed (although the estimates are accurate)\nsimulateData() with skewness/kurtosis argument(s) (ie using ValeMaurelli) sometimes resulted in wrong means for the observed variables, due to the scale() function which first centers, and then scales (while it should be the other way around). This has no effect on the covariance structure.\nsimuldateData() failed (cov.x error) in the presence of exogenous covariates and if standardized = TRUE\nfree residual covariances between ordered endogenous variables are set to zero (post-estimation) under parameterization=“delta” (the default)\nanova(…, SB.classic = FALSE) complains about multiple actual arguments\nmodindices() fails when parameteriation = “theta”\nsummary(.., rsquare = TRUE) does not show the R-square values (while inspect(, “rsquare”) works)\n\n\n\nVersion 0.5-15\n\nReleased on CRAN: 15 November 2013\nNew features and user-visible changes:\n\nthis is mainly a maintenance release\nlavTables() has been redesigned\nzero.add and zero.keep.margins arguments control how lavaan deals with missing values in bivariate frequency tables\nPML estimator uses a different objective function and converges (much) faster\ninspect(fit, “covarage”) and inspect(fit, “patterns”) return information about missingness coverage and missing patterns respectively\n\nKnown issues:\n\nparameterization=“theta” is not implemented yet\n(marginal) ML estimation for categorical data is not implemented yet\n\nBugs/glitches discovered after the release:\n\nthe shortcut ‘item ~ 0’ to fix an intercept to zero seems to be broken; workaround: use ‘item ~ 0*1’ instead\nthe polychoric correlation between two variables is computed wrongly if (and only if) the variables are binary and they happen to have exactly the same threshold (ie the marginal distributions are identical); the result is a fatal error (so it does not happen silently)\nmodindices did not work if explicit equality constraints (using the “==” operator) were included in the model syntax\nmissing=“pairwise” (if data are categorical) was also deleting cases with missing values in the exogenous covariates\nif some cases have only missing values (and should be removed), the exogenous covariate values (if any) were not removed\nif a “;” was included after a comment (“#”), this confused the syntax parser\n\n\n\n\nVersion 0.5-14\n\nReleased on CRAN: 21 July 2013\nNew features and user-visible changes:\n\nlavTables(, dimension=1L) produces one-way tables\nWLS(MV) estimator + categorical data now allows for missing data via the missing=“pairwise” argument\npredict() and bootstrapping now also work in the categorical case\nrelax check for non positive-definite theta and psi matrices: eigenvalues are allowed to be negative within a tolerance of .Machine$double.eps^(3/4)\nresid() and residuals() gain type=“casewise” argument to compute (unstandardized) casewise residuals\ninspect(fit, “data”) now returns the raw data\n\nKnown issues:\n\nparameterization=“theta” is not implemented yet\n(marginal) ML estimation for categorical data is not implemented yet\n\nBugs/glitches discovered after the release:\n\nthe (rarely used) “:” operator added an extra group\npredict() and resid(, “casewise”) fail in the presence of exogenous covariates\nRMSEA is using N-g (instead of N) even if likelihood == “normal”\n0.5 was added to all bivariate frequency cell; for larger tables with many empty cells, this may distort the polychoric correlation in small samples\npoor starting values (always 1) for factor loadings if only two indicators\n\n\n\n\nVersion 0.5-13\n\nReleased on CRAN: 11 May 2013\nNew features and user-visible changes:\n\nmplus2lavaan() (written by Michael Hallquist) is capable of reading (and fitting) models specified in an Mplus input file\nnew function lavExport() allows exporting a lavaan model to an external program (currently only Mplus)\nnew function lavTables() shows observed and expected frequencies for pairwise tables of categorical variables\nnew function lavMatrixRepresentation()\nchanges of function names: lavaanNames() becomes lavNames(), parseModelString(), becomes lavParseModelString(), lavaanify() becomes lavParTable() (but the old names are still valid)\nscale check has been relaxed (but see bugs!)\nstandardized=TRUE in simulateData() now also applies to latent variables\n\nBugs/glitches discovered after the release:\n\nscale check should ignore exogenous variables, but instead, only includes exogenous variables (workaround: warn=FALSE)\nsimulateData() can not handle a parameter table as input (although the documentation claims it can)\nuser-specified ‘ordered’ variables with numeric 0 values were not (always) properly converted to integer codes (starting from 1)\n\n\n\n\nVersion 0.5-12\n\nReleased on CRAN: 8 March 2013\nNew features and user-visible changes:\n\nestfun.lavaan() or lavScores() function computes case-wise scores (first gradient) values\nbetter starting values (using an instrumental variables approach) for factor loadings when indicators are categorical\nfull support for categorical variables in simulateData()\n\nKnown issues:\n\nfactor scores, bootstrapping and theta parameterization are not yet implemented if data is categorical\n\nBugs/glitches discovered after the release:\n\nWLS with multiple groups with small (say, < 50) and unequal sample sizes often fails (non-convergence)\nfitMeasures(fit, “npar”) was not computed correctly if explicit equality constraints (using “==”) were used in the model; this affects the computation of AIC and BIC in these cases\n\n\n\n\nVersion 0.5-11\n\nReleased on CRAN: 19 Dec 2012\nNew features and user-visible changes:\n\nestimator=“PML” is now available if all data is categorical; this is based on work done by Myrsini Katsikatsou\nsimulateData() supports thresholds and creates ordinal data\ninspect() gains ‘WLS.V’, ‘NACOV’, ‘cov.lv’, ‘cor.lv’, ‘cov.all’, and ‘cor.all’ arguments\nfitMeasures() spits out many more fit indices: rmr, cn, nnfi, nfi, rfi, ifi, rni, gfi, agfi, pnfi, mfi, ecvi\nnew argument ‘sample.cov.rescale’ to control if the sample covariance must be internally rescaled (by a factor N-1/N) or not\n\nKnown issues:\n\nbootstrapping and theta parameterization are not yet implemented if data is categorical\n\nBugs/glitches discovered after the release:\n\ndefined (:=) and constrained (<,>,==) parameters are not standardized if a standardized solution is requested\nsimulateData(): if intercepts are included in the script, and the skewness/kurtosis argument is used, the sign of the intercepts/means is switched\nif sample.cov is provided, and estimator=“WLS” (with a user-provided weight matrix), lavaan complains about the (new) sample.cov.rescale argument not set to a logical\nif a parameter table is given to the ‘start’ argument, an error occurs in some extreme cases, the starting value for a polyserial correlation fell outside the [-1,1] range, causing an error\nvnames(partable, type=lv.y/lv.x/ov.y) did not always respect the correct order of the variable names, leading to parameters that were inadvertently set to zero\nconsider the following model syntax: ‘y ~ x; z ~~ y’: here, y is upgraded to a phantom/dummy latent variable (in the LISREL representation), but z was not upgraded (while it should) if it was not involved in a regression formula\n\n\n\n\nVersion 0.5-10\n\nReleased on CRAN: 25 Okt 2012\nNew features and user-visible changes:\n\nmodification indices, Rsquare now work if data is categorical\nchanged package mvtnorm to package mnormt, resulting in (slightly) faster computations of the thresholds and polychoric correlations in some cases\npredict() gains a newdata argument\na user-specified weight matrix can now be provided (using the WLS.V argument) to be used in estimation when using estimator WLS and friends\na user-specified asymptotic variance matrix of the sample statistics can be provided (using the NACOV argument) to be used when computing robust standard errors and robust test statistics\nif a model does not converge, lavaan will not attempt to compute standard errors and a test statistic\nbetter handling of multibyte characters in summary() function better handling of empty cells in pairwise frequency tables\n\nKnown issues:\n\nbootstrapping and theta parameterization are not yet implemented if data is categorical\n\nBugs/glitches discovered after the release:\n\nif the model only contains a single variable, lavaan fails\nif the model only contains a single categorical variable (eg a probit regression), lavaan fails\nresidual variances that are set to zero during estimation (eg residual variance of composite latent variable), are internally set to 1.0 again in the model matrices after model fitting; this only affects post-fitting operations using the model matrices directly (eg the predict() function)\nresid(fit, type=“standardized”) fails if there are any exogenous variables in the model, and if estimator=“MLM” or “MLR” is used\nbootstrapping fails if missing=“ml” and the model contains exogenous variables\nin the categorical case, an internal function (muthen1984) can not handle variables that are of type integer (workaround: coerce them to type numeric)\n\n\n\n\nVersion 0.5-9\n\nReleased on CRAN: 8 Sept 2012\nNew features and user-visible changes:\n\nfull support for ordinal (and binary) dependent variables using the three stage WLS approach as described in\nMuthén (1984); this implies support for multiple groups (using the delta parameterization), support for a mixture of binary/ordinal/continuous (dependent) variables, and support for exogenous ‘fixed.x’ covariates\nnew test statistics: mean.var.adjusted (aka the Satterthwaite approach), and scaled.shifted (to mimic the behavior of Mplus 6 and higher)\nnew estimators: MLMV, ULS, ULSM, ULSMV, DWLS, WLSM, WLSMV\nthe ‘se’ option robust.mlm has been renamed to robust.sem, while robust.mlr has been renamed to robust.huber.white\nbetter handling of standard errors if constraints have been used\nnew operator ‘|’ in the syntax: ‘u | t1 + t2 + t3’ refers to the (three) thresholds of an ordinal variable u with four levels\n‘u ~*~ u’ refers to the scaling parameter (of the delta parameterization) of an ordinal variable u ‘y ~ 1 + x1 + x2’ is now legal syntax\nthe convenience function ‘measurementInvariance()’ has been moved to another package (semTools)\n\nKnown issues:\n\nbootstrapping, modification indices, Rsquare and theta parameterization are not yet implemented (if data is categorical) some cases will run very slow (in fact slower than 0.5-8), due to the fact that new CRAN policies disallow using .Fortran calls to external packages (eg mvtnorm); therefore, the computation of probabilities under the bivariate standard normal distribution is not vectorized, and hence extremely slow\n\nBugs/glitches discovered after the release:\n\nif a two-way table contains zeroes, the computation of the polychoric correlation may fail with the message ‘Error in if (rho == 0) { : missing value where TRUE/FALSE needed’ (fixed in 0.5-10)\nestimator=“ULS” does not work if only sample statistics are provided\nif the ordered= argument contains a single variable only, it fails\nthe anova() function may fail for scaled difference tests if the (full) M1 model contains parameters that are not listed in the parameterTable of (restricted) M0 model (workaround: use anova(fit1, fit2, SB.classic=TRUE)"
  },
  {
    "objectID": "history/dot4.html",
    "href": "history/dot4.html",
    "title": "0.4 series",
    "section": "",
    "text": "Version 0.4-14\n\nReleased on CRAN: 11 May 2012\nNew features/changes:\n\nthis is a maintenance release, to go along with the official publication of the ‘lavaan’ paper in the Journal of Statistical Software (volume 48)\ncitation(“lavaan”) will provide correct citation information\ninternal slot @User has been renamed @parTable\ninternal slot @Sample has been renamed @SampleStats\n\nBugs/glitches discovered after the release:\n\na bug (introduced in 0.4-12) resulted in wrong derivatives for the PSI matrix; this may affect some SEs for models with more than 2 latent factors (or more than 2 observed dependent variables, since they are converted to latents) (bug reported by Mijke Rhemtulla)\nwhen estimator=“(fi)ml”, estimation may fail for saturated models (e.g. univariate regression models); workaround: use fixed.x=FALSE\nunivariate regression where intercept is explicitly included in the model syntax sometimes returns the parameters in the wrong order\n\n\n\n\nVersion 0.4-13\n\nReleased on CRAN: 10 April 2012\nNew features/changes:\n\nthis is a maintenance release, mainly reorganizing internal code\nbootstrapLavaan() and bootstrapLRT() functions gain a type=“yuan” method; contributed by Ed Merkle\nparameterEstimates() will add an ‘fmi’ column containing the fraction of missing information if missing=“fiml”; suggested by Mijke Rhemtulla\nimproved check for linear constraints\nupdated versions of InformativeTesting() and related functions\nparseModelString() is now exported\nlavaan now requires R version 2.14.0 or higher\n\nBugs/glitches discovered after the release:\n\ndefined parameters (created using the “:=” operator) are not standardized in the Std.lv and Std.all columns\n\n\n\n\nVersion 0.4-12\n\nReleased on CRAN: 2 February 2012\nNew features/changes:\n\nbootstrapLavaan() uses a generic FUN argument to extract any type of information from a fitted lavaan object\nbootstrapLRT() gains a calibrate argument to switch on a double (nested) bootstrap\nboth bootstrapLavaan() and bootstrapLRT() functions have support for the parallel package\nsimulateData() gains a skewness and kurtosis argument to simulate nonnormal multivariate data\nnew function InformativeTesting() for testing order restricted hypothesis; contributed by Leonard Vanbrabant\ninitial support for a new operator “<~” to specify formative constructs (composites)\n\nBugs/glitches discovered after the release:\n\nbootstrapLRT() with type=“bollen.stine” and multiple groups is broken\nbollen.stine plus mean structure used sample.mean instead of Mu.hat for the transformation\nif data is deleted listwise, summary() does not show the ‘Total’ (original) number of observations\nparameters for composites defined by the <~ operator are not standardized, even if standardized=TRUE\n\n\n\n\nVersion 0.4-11\n\nReleased on CRAN: 21 December 2011\nNew features/changes:\n\nparametric bootstrap, see bootstrapLavaan() function\nsimulateData() to generate data starting from a lavaan model syntax\ngetCov() function to easily read in the lower triangular elements of a covariance matrix\nnew operator “:” to allow for different models for different groups\nthere is no need to use the ‘label()’ and ‘equal()’ modifiers anymore; in multiple groups, labels can\nbe provided as follows: c(a1,a2,a3,a4)*x1 (no quotes needed!)\nmodels with only covariances and/or means (i.e. no “~” or “=~” operators) are now supported\n\nBugs/glitches discovered after the release:\n\nbootstrapLavaan() with type=“parametric” only produces an error (in the CRAN version)\nsometimes, the optimizer (nlminb) falsely reports non-convergence if the fx is below .Machine$tol.eps\nmodindices() with multiple groups is broken in 0.4-11\nestimator=“MLM” fails if data contains missing values (workaround: use na.omit() to remove missing cases or use estimator=“MLR”)\n\n\n\n\nVersion 0.4-10\n\nReleased on CRAN: 3 October 2011\nNew features/changes:\n\nmimic=“Mplus” is no longer the default; the default is mimic=“lavaan”\nadded ‘start’ argument to control the way the starting values are chosen\nadded ‘control’ argument to pass control parameters to the optimizer\nparameterEstimates() function always includes confidence intervals, and only standardized estimates if standardized=TRUE\nstandardized estimates now come in three flavors: std.lv, std.all and std.nox\nse=“boot” or se=“bootstrap” provides bootstrap standard errors\ntest=“bollen.stine” or test=“bootstrap” provides a p-value for the test statistic based on the Bollen-Stine bootstrap\nif data is missing, the h1 model is now estimated using the EM algorithm (instead of quasi-newton)\nnew operator := for defining arbitrary (linear or nonlinear) functions of free parameters (eg ab := a*b where both a and b are labels of free parameters); standard errors are computed using the delta method\n\nBugs/glitches discovered after the release:\n\nusing multiple modifiers on intercepts [eg f ~ a1 + start(1)1] produces a syntax error\nupper CI RMSEA fails if RMSEA is zero but df > 0\nthe baseline model used by the lavaan() function (not the other fitting functions) is wrong if there were multiple groups and group equality constraints; this affects the CFI/TLI indices\nmultiple group analyses with missing=“ml” has some convergence issues, due to a faulty group weight\n\n\n\n\nVersion 0.4-9\n\nReleased on CRAN: 15 June 2011\nNew features/changes:\n\nall bugs/glitches in 0.4-8 are fixed\nnew starting values for factor loadings\nbetter scaling of free parameters in the optimization routine\nnew modelCov() function to inspect the covariance matrix before analysis\n\nBugs/glitches discovered after the release:\n\nif equality constraints are included in the model using the “==” operator, the df count is wrong\nin some cases, the combination of both within-group and between-group equality constraints produces errors\nif the argument missing=“ml” is used but the data does not contain any missings, the summary() function produces an error\nit was not allowed to specify a covariance using the “~~” operator where one element was an observed variable, and the other element a latent variable\n\n\n\n\nVersion 0.4-8\n\nReleased on CRAN: 24 April 2011\nNew features/changes:\n\nall bugs/glitches in 0.4-7 are fixed\nAIC, BIC and logLik use S4 generics from the stats4 package\nnew lavaan-method ‘nobs()’ returns the total sample size used for the analysis\nadditional options for the ‘group.equal’ argument\nnew ‘anova()’ function to compare nested models using a (possibly scaled) chi-square difference test\nbetter internal scaling makes the optimizer (nlminb) more robust, if the data is badly scaled\ninstead of using ‘label(“mylabel”)x1’ to assign a parameter label, you can now use ’mylabelx1’\ninstead of using the ‘equal()’ modifier, you can now enforce equality constraints by using the same label for several parameters\ninitial (and experimental) support has been added for general linear and nonlinear equality and inequality constraints\n\nBugs/glitches discovered after the release:\n\nif the “group” variable in the data frame contained missing values, an additional group was added for those cases\nthe parameter names in the group.partial argument were converted to lower caps; if some parameter names included capitals, the group.partial argument had no effect\nthe NA* modifier is interpreted as a label, and is ignored (workaround: as.numeric(NA)* works)\na bug in the code for the auto.single.fix argument (which is automatically set to TRUE in the cfa/sem/growth functions) produces the wrong model if indicators are shared by several latent variables (workaround: use the lavaan() function for these models)\n\n\n\n\nVersion 0.4-7\n\nReleased on CRAN: 21 Februari 2011\nNew features/changes:\n\ncompletely rewritten codebase (much smaller, more modular and much faster)\nimproved parsing mechansism using the new function lavaanify()\nimproved model syntax (multiple modifiers, multiple lhs elements, and more)\nMLM results are now identical to Mplus (except for fixed.x covariates)\nadded MLF and MLR estimators\nnew functions: standardizedSolution, parameterEstimates, modindices, fitMeasures, update, AIC, BIC, predict\nnormalized and standardized residuals\na new low-level function lavaan() has the ‘feature’ of doing nothing automagically\nmeasurement.invariance function has been renamed to measurementInvariance\nimproved summary, reporting sample size and missingness information\nmimic.Mplus argument is replaced by a ‘mimic’ argument; can be set to “Mplus” (default) or “EQS”\nnew argument ‘likelihood’ can be set to “wishart” or “normal” (for maximum likelihood estimation only)\nna.rm argument is replaced by a ‘missing’ argument; can be set to “listwise” (default) or “ml”\ngroup.constraints argument is replaced by a ‘group.equal’ argument; new argument ‘group.partial’ allows for partial equality constraints\nstandard.errors argument is replaced by a ‘se’ argument’; new argument ‘test’ for choosing the test statistic new ‘fixed.x’ argument\nnew argument ‘representation’ as a placeholder for the future\nin the standardized solutions, the (residual) covariances are now in a correlation metric\n\nKnown issues for this release:\n\nMLM value in models with fixed x covariates is (slightly) different in Mplus\nSRMR value is sometimes different in Mplus: if information is observed, if data is missing, and if equality constraints are used with multiple groups\nEPCs for equality constraints are not entirely correct (but almost)\n\nBugs/glitches discovered after the release:\n\nfunction modindices: sepc.all column contains value ‘Inf’ for all covariances; in a multiple group analysis, only the last group is shown\nrsquare labels in the summary output are sometimes in the wrong order\ninternal function ‘vnames’ (called by function lavaanNames) with type ‘lv.x’ or ‘lv.y’ does not (always) return the names of the variables in the same order as for type ‘lv’\nfunction measurementInvariance(): the group.partial argument produces an error\nif the data contains cases where all variables are missing, these cases are silently removed from the data, but\nthe total number of observations is not adjusted\nthe logLik function returns a ‘df’ attribute (to be used in the AIC() function); this should be the number of free parameters, not (as in 0.4-7) the degrees of freedom of the model"
  },
  {
    "objectID": "history/dot6.html",
    "href": "history/dot6.html",
    "title": "0.6 series",
    "section": "",
    "text": "Version 0.6-16\n\nReleased on CRAN: 19 July 2023\nNew features and user-visible changes:\n\nthis is another maintenance release (mainly fixing some bootstrap issues)\nthe computation of robust rmsea/cfi values can be switched off (if the computations take forever); for example: fitMeasures(fit, fm.args = list(robust = FALSE)) or summary(fit, fit.measures = TRUE, fm.args = list(robust = FALSE))\nsam() handling of zero diagonal elements in THETA is now identical to what is done in lavPredict()\nsam() now uses bounds = “wide.zerovar” when fitting the measurement blocks\n\nBugs/glitches discovered after the release:\n\n(just released)\n\n\n\n\nVersion 0.6-15\n\nReleased on CRAN: 14 March 2023\nNew features and user-visible changes:\n\nthis is just a maintenance release\nestimator = “js” (james-stein) and “jsa” (james-stein aggregated) for (simple) CFA model only.\n\nBugs/glitches discovered after the release:\n\nbootstrap + defined parameters + unsuccessful bootstrap runs produced NA values for the standard errors\nbootstrap + fiml + fixed.x = FALSE resulted in (many) unsuccessful boostrap runs\nsam(): when mm.list contains measurement blocks with multiple latent variables, the covariances between the latent variables were fixed to zero\nsam(): equality constraints in the structural part were not handled correctly when computing the (two-step) standard errors\nmodification indices: some ~~ elements (between elements in ov.names.y and o.names.x) were not included in the table\nnobs<2 failed for multiple groups when using sampling weights\ncategorical + clustered seemed to work (while the clustering was just ignored)\nparameter names were missing in the output of boostrapLavaan()\nsampling.weights= argument was missing in lavCor()\n\n\n\n\nVersion 0.6-14\n\nReleased on CRAN: 9 Feb 2023\nNew features and user-visible changes:\n\nthis is mostly a bug-fix release\na new argument ov.order= can be set to “model” (= the default) or “data”; this determines if the internal order of the observed variable names (as reflected in the output of lavNames()) are based on the model syntax or the data\nadd new tests: browne.residual.nt.model and browne.residual.adf.model\ninitial support (point estimates only) for some non-iterative estimators for (simple) CFA models: estimator = “fabin2”, “fabin3”, “guttman1952”, “bentler1982”\nrobust RMSEA/CFI values in the categorical setting will result in NA values if the input (polychoric/tetrachoric) matrix is not positive-definite (use fm.args = list(cat.check.pd = FALSE) to override)\nlavCor() now accepts a logical TRUE/FALSE value for the ordered= argument\n\nBugs/glitches discovered after the release:\n\nsee version 0.6-15\n\n\n\n\nVersion 0.6-13\n\nReleased on CRAN: 9 Jan 2023\nNew features and user-visible changes:\n\na new function efa() allows for classic (single-group) explorary factor analysis\na new function lavPredictY() allows for the prediction of ‘y’ values based on ‘x’ values (see ?lavPredictY for a reference)\na new function lavTest() allows to extract (or compute) one or several test statistics based on an already fitted object\nnew test statistics: browne.residual.adf and browne.residual.nt\nsummary() and fitMeasures() gain an fm.args= argument, allowing to set options (e.g., rmsea.ci.level) related to fit measures\nlavTestLRT() will now provide the RMSEA based on the difference test\nrobust CFI and RMSEA are now computed for more settings: when (all) data is categorical/ordered, when data is continuous but the estimator is MLMV, and when missing = “ml” (based on work done by Victoria Savalei and colleagues)\nnew global option scaled.test= determines which test statistic will be scaled (if multiple test statistics have been requested)\nnew option gamma.unbiased: if set TRUE, an unbiased version of the so-called Gamma matrix will be used, instead of the regular (biased) version. See this paper\niseed now works correctly in bootstrapLavaan() and related functions thanks to a patch provided by Shu Fai Cheung\nbootstrapLavaan() now always returns all bootstrap runs (not just the converged ones); it also warns about non-admissible solutions\nwhen bounds = “standard” or “wide”, bounds are now also computed for covariances per default\nthe output of lavInspect() for “gamma”, “wls.v”, “wls.obs” and “wls.est” now includes labels\nthe sam() function gains alpha.correction= argument to allow for small sample corrections\n\nImportant bug fix:\n\nin all lavaan versions < 0.6-13, there was on error in the computation of scaled (difference) test statistics if 1) a mean and variance adjusted test was used (i.e., test = “scaled.shifted”, or test = “mean.var.adjusted”), 2) multiple groups were involved, and\n\nequality constraints (across groups) were involved. A typical setting are measurement invariance tests when data is categorical. In those settings, the resulting test statistic was slightly off (typically <5%). Many thanks to Steffen Gronneberg, Njal Foldnes and Jonas Moss for reporting this.\n\n\nBugs/glitches discovered after the release:\n\nan error is produced when you have missing = “ml”, a robust test statistic, a model with exogenous covariates, fixed.x = TRUE (=the default), and you request fit measures (quickfix: use fixed.x = FALSE) (see github issue 261)\nlavPredictY() did not work properly when newdata= was used, and meanstructure = FALSE; in addition, the columns in the output could be in the wronger order if the order of ynames was different than the order of lavNames() (see github issue 259)\nthe NACOV and WLS.V matrices (if provided as arguments) naively assume that the internal order of the observed variables is the same as the order of the sample statistics (see github issue 260)\n\n\n\n\nVersion 0.6-12\n\nReleased on CRAN: 4 July 2022\nNew features and user-visible changes:\n\ntwolevel SEM now also supports conditional.x = TRUE\nout <- summary(fit) is now completely silent (i.e., nothing is printed); out contains a list with ingredients (github issue 193)\nparameterEstimates() gains boot.ci.type = “bca” (for the single-group setting only, for now)\nsyntax: allow for partial specifications of thresholds (github issue 215)\nlavaanify() gains a nthresholds= argument (see github issue 214)\nwhen bootstrapping is used, a warning is printed informing the user how many solutions were not admissible (see github issue 235)\n\nBugs/glitches discovered after the release:\n\nstandardizedSolution() did not work if representation = “RAM”\niseed did not work properly in bootstrapLavaan() and other bootstrap routines\nthe sam() function did not work (any longer) with categorical data\nthe scaled (difference) mean-and-variance adjusted test statistic is wrong in the case of multiple groups involving equality constraints\n\n\n\n\nVersion 0.6-11\n\nReleased on CRAN: 31 March 2022\nNew features and user-visible changes:\n\nthis is (again) only a maintenance release to prepare for R 4.2\nnew option ceq.simple; when set to TRUE, a more compact representation is used in the parameter table if only simple equality constraints are used; the default is FALSE (for now)\n\nBugs/glitches discovered after the release:\n\nridge= option did not work properly\ndf counting bug when nlevels > 1L, ngroups > 1L and fixed.x = TRUE\nEPC decisions were not based on the absolute value (pull request 231)\nname clash between ‘cl’ argument and ‘cluster’ argument\ninteraction terms defined by a colon (a:b) were included in lavNames(,“ov.x”) even if either a or b is a dependent variable\nstandardizedSolution() did not work if representation = “RAM”\n\n\n\n\nVersion 0.6-10\n\nReleased on CRAN: 25 January 2022\nNew features and user-visible changes:\n\nthis is a maintenance release, with mostly minor changes under the hood (the github issues >214 were not yet addressed in this release)\ninitial support for representation = “RAM”\nbetter starting values for regression coefficients, when all variables are observed\nsam(): an indicator can now also be a predictor in the structural part\nestimator DLS: allow for non-positive Gamma, and allow sample.cov.rescale to be set by the user\nnew rotation criteria: bi-quartimin and bi-geomin\n\nBugs/glitches discovered after the release:\n\nif all data is missing for a pair of variables, the degrees of freedom should be adapted\n\n\n\n\nVersion 0.6-9\n\nReleased on CRAN: 27 June 2021\nNew features and user-visible changes:\n\nthe sam() function is now public\ninitial support for multilevel + missing = “ml”; only for estimator = “ML” (not “MLR”)\nif missing = “two-stage”, h1.information is now always set to “unstructured”\ngroup.w.free = TRUE now also works for DWLS/WLS/WLSMV estimators\n\nBugs/glitches discovered after the release:\n\nmultilevel+missing=“ml” did not work if there was only 1 variabele on the within level\nsee github issues >214\n\n\n\n\nVersion 0.6-8\n\nReleased on CRAN: 10 March 2021\nNew features and user-visible changes:\n\nnew estimator = “DLS” for distributionally-weighted least squares (see Du, H., & Bentler, P.M. (in press). Distributionally-weighted least squares in structural equation modeling. Psychological Methods.)\nnew optimizer: optim = “GN” provides Gauss-Newton optimization\ngroup.w.free = TRUE now also works in the categorical case\nthe information=, observed.information= and h1.information= arguments now accept a vector of two elements, eg information = c(“observed”, “expected”); the first entry is used for the standard errors, while the second entry is used for the test statistic\nnew arguments omega.information=, omega.h1.information=, omega.information.mean=, and omega.h1.information.meat= allow for even more variants of various robust test statistics\ntest = “yuan.bentler” now always uses observed.information = “h1” (if information is observed) and omega.h1.information = “unstructured”\nlavResiduals() has a new output = “table” argument\nrotations.se = “bordered” per default (only used when rotation is used)\nin a multiple group analysis, a single modifier is always recycled accross; this is now also true for labels (with a warning, unless group.equal= is used)\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nstandardizedSolution() did not show labels (if any)\nlavResiduals() gave wrong results when the solution was rotated\nlav_mvnorm_missing_h1.R sometimes failed to produce starting values (and stopped with an error)\na check to force the (co)variance matrix of standardized parameters to be positive definite was too strict (and is now omitted)\nlavTestLRT + satorra2002 + A.method = “exact” did not work when equality constraints were involved (github issue 211)\n\n\n\n\nVersion 0.6-7\n\nReleased on CRAN: 31 July 2020\nNew features and user-visible changes:\n\nlatent ~~ observed formulas are now supported; the observed variables are automatically upgraded to (single-indicator) latent variables\nnew option check.lv.names: when set to FALSE, lavaan proceeds even if it detects that some latent variable names occur in the dataset\noptimization is made somewhat more robust: if a first attempt fails (no convergence) three additional attempts are made (with optim.parscale= “standardize”, with start = “simple”, and with the combination optim.parscale = “standardized” and start = “simple”)\nthe second argument of lavPredict() is now newdata (instead of type), to be consistend with predict()\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nfitMeasures() did not longer work for estimator = “PML”\nlavPredict + newdata + categorical did not work\nlavCor() did not listen to the missing = “fiml” argument\nlavPredict + Bartlett + missing: if all indicators of a factor are missing, the factor score was 0 (should be NA)\nblock syntax for groups was no longer working\n\n\n\n\nVersion 0.6-6\n\nReleased on CRAN: 13 May 2020\nNew features and user-visible changes:\n\nlavPredict() + se = TRUE now works correctly in the presence of missing data and missing = “fiml”\nlavResiduals() + summary = TRUE now provides confidence intervals and better labelling\nlavResiduals() + summary = TRUE now works for categorical data, but only in models without exogenous covariates (for now)\nlavCor() gains cor.smooth= argument to force the correlation matrix to be positive definite\nsum(sampling.weights) no longer needs to equal the total sample size\nsampling.weights can now be used in combination with categorical data and estimator WLSMV and friends\ninformation/h1.information/observed.information arguments now accept a vector of two elements: the first one is for the standard errors, the second for the test statistic\nthe data (provided by the data= argument) is now always converted to a data.frame (in case it is a tibble, or another class that inherits from data.frame)\nexperimental feature: when the sample size is (very) small, adding the argument bounds = TRUE may stabilize estimation, by automatically choosing upper and lower bounds for several sets of model parameters\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nlavPredict + method=“Bartlett” + fsm=TRUE failed\nlavPredict + newdata failed if newdata contained a single observation\nparallel= option did not work in boostrapLavaan()\nstandardizedSolution + type = “std.lv” failed\nmissing = “ml” (or “fiml”) + sampling.weights failed\nlavaan:::fsr() failed, unless missing = “listwise” was given explicitly\n\n\n\n\nVersion 0.6-5\n\nReleased on CRAN: 28 Aug 2019\nNew features and user-visible changes:\n\na new option `effect.coding’ can be used to scale the latent variables; a typical use is effect.coding = “loadings”, or effect.coding = c(“loadings”, “intercepts”); if “loadings” is included, equality constraints are used so that the average of the factor loadings (per latent variable) equals 1; if “intercepts” is included, equality constraints are used so that the sum of the intercepts (belonging to the indicators of a single latent variable) equals zero; as a shortcut, you can also set effect.coding = TRUE, which implies effect.coding = c(“loadings”, “intercepts”); note that his may not work well with bifactor models, or any other type of model where items depend on multiple factors\nsummary(fit, nd = 4) now shows 4 digits (after the decimal point) for all (non-integer) numbers, including the header; the header has been re-arranged slightly: the estimator is now shown on the top; the test statistic(s) are now in a section ‘Model Test User Model:’\nthe test= argument now accepts a vector of multiple test statistics, for example test = c(“satorra.bentler”, “mean.var.adjusted”)\nparameterEstimates(), standardizedSolution() and fitMeasures() have a new output= argument which can be set to “text” for pretty printing\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nin the categorical setting (estimator U/WLSMV) + missing = “pairwise” + the number of thresholds is larger than one: some entries in the weight matrix are not correct, resulting in (small) bias for some parameters\noptim.method=“none” is ignored in nlminb.constr() settings; as a side-effect, this produces wrong results in lavTestLRT() if method=“satorra.bentler.2010”, and explicit inequality constraints are used in the model\nwrong labels for lavInspect(,“lv.mean”) and lavInspect(,“cov.all”) if both formative and reflexive latent variables are used\nthe “<~” operator did not work well in the categorical setting in combination with conditional.x = TRUE\nparameterEstimates + fmi = TRUE often gives crazy results\nlavTestLRT + MLR + df=0 for one of the models results in an error\nestimator = “WLS” + continuous data + missing = “pairwise” does not work\nloglikelood value if fixed.x = TRUE and only sample statistics are provided is still reflecting the joint loglikelihood\n\n\n\n\nVersion 0.6-4\n\nReleased on CRAN: 3 July 2019\nNew features and user-visible changes:\n\nthis release includes mostly changes under the hood\nan extra check is done for convergence (even if the optimizer claims convergence): we check if all the elements of the (unscaled) gradient are smaller than 0.0001 (in absolute value). If not, we set converged = FALSE. The tolerance value 0.0001 can be changed by the option optim.dx.tol. To switch off this check, use optim.dx.tol = +Inf\nlavInspect() gains new options: “vcov.def.joint” (and standardized variants) to give the (joint) variance-covariance matrix of both the free and `defined’ (using the := operator) variables; “loglik.casewise” to extract casewise (log)likelihood values (only if ML has been used); “h1.information” to extract the information matrix of the unrestricted h1 model\nlavTestScore() + uni table and modindices() output (in particular epc and epv values) are now more alike\nlavPredict() + Bartlett now uses FIML to compute factor scores (in the presence of missing data); new append.data= argument cbinds factor scores and raw data; if assemble = TRUE, factor scores of multiple groups will be joined in a single data.frame (with a group column); accept newdata= argument, even if sample statistics were used when fitting the original model\nusing ordered = TRUE implies all variables should be treated as ordinal\nnew logical arguments orthogonal.y and orthogonal.x can be used to specify zero covariances between endogenous and exogenous latent variables (only) respectively\nnew option sampling.weights.normalization (set to “total” by default)\ngroup.equal now also accepts “composite.loadings” when the “<~” operator is used\nparameterEstimates() gains a remove.nonfree= argument\ninitial (but still experimental and undocumented) support for rotation, EFA, and ESEM (contact me if you wish to test this)\ninitial (but still experimental and undocumented) support for the `Structural After Measurement’ (SAM) approach (see the new lavaan:::sam() function; contact me if you wish to test this)\n\nKnown issues:\n\nsame as 0.6-1 (although many long standing github issues have been resolved)\n\nBugs/glitches discovered after the release:\n\ntwolevel models: standard errors are off for fixed effects (only) if the model contains a regression of the form y ~ x, both variables are observed, and x is not centered\ntwolevel models: the chi-square test statistic for the baseline model is wrong (too low): the chi-square test statistic for the full model was substracted; therefore, if the user model fitted really bad, the baseline test statistic was too low; if the user model fitted reasonably well, there was (almost) no impact on the CFI/TLI fit measures\nlavPredict(): labels were wrong in the multigroup twolevel case\n\n\n\n\nVersion 0.6-3\n\nReleased on CRAN: 22 September 2018\nNew features and user-visible changes:\n\nnew function lavResiduals() provides raw and standardized residuals in addition to summary statistics (rmr, srmr and crmr, including their standard error, a test for exact fit, and an unbiased version); for continuous data only (single-level, conditional.x = FALSE)\nnew option missing = “ml.x” or missing = “fiml.x” will not delete cases with missing values on exogenous covariates, even if fixed.x = TRUE (this restores the behavior of < 0.6); this can be useful for models with a large number of exogenous covariates, which you can treat as stochastic, but where fixed.x = TRUE is just more convenient\nlavInspect/lavTech + “sampstat” now always returns the data summaries from the h1 slot; this implies that if data is missing, and missing = “(fi)ml)”, you get the ‘EM’ estimated covariance matrix and mean vector (instead of the pairwise deleted covariance matrix from the samplestats slot)\nlavInspect/lavTech + “sampstat” and “implied” no longer return the mean vector if meanstructure = FALSE\nsrmr_bollen is renamed crmr in the output of fitMeasures(), and does no longer count the (zero) diagonal elements when taking the average\nif conditional.x = TRUE, the baseline model will now set the slopes free (instead of fixing them to zero); this will usually result in a much better fit for the baseline model, and a less optimistic value for CFI/TLI and friends; to get back the old behaviour, set the option ‘baseline.conditional.x.free.slopes’ to FALSE\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nmimic = “Mplus” was no longer setting meanstructure = TRUE\nif a partable was provided as input (instead of model syntax), the `y’ variables were identified by using lavNames(fit, “ov.y”) instead of lavNames(fit, “ov.nox”); therefore, we ‘missed’ some variables in lav_dataframe_check_ordered(), not (automatically) treating them as ordered\nmimic = “EQS” was not setting all the correct settings any longer\nlavPredict() + Bartlett + missing data did not produce ‘true’ FIML factor scores (although they were very close)\nlav_partable_merge() did not set the group/level column right, affecting lavTestLRT() when method = “SatorraBentler2010” (producing a warning that the optimizer could not find a solution, and no test statistic)\nwhen a second-order factor was included in the model, the summary output did not print a dot (‘.’, to indicate endogenous) in front of the (residual) variances of the first-order latent variables\nlavTestLRT() + Satorra2000 with two models having the same df resulted in a strange error\nlavTestScore() + uni resulted in epc values with the wrong sign; as a result, the epv values were in the wrong direction\nlavaanList() produced “nlev too low for some vars” error, when ordered variables were involved that included missing values (NA) (the NA was counted as an additional category)\n\n\n\n\nVersion 0.6-2\n\nReleased on CRAN: 16 July 2018\nNew features and user-visible changes:\n\ncluster-robust standard errors are reported when the cluster= argument is used in combination with a standard single-level syntax (without the “level:” keywords); this can be used in combination with missing = “fiml” (to handle missing values) and sampling weights\nadded lower() and upper() modifiers in the model syntax; it works in a similar way as the start() modifier to provide starting values; for example, to force a variance (say, y1 ~~ y1) to be larger than 0.001, you can now write y ~~ lower(0.001)*y1\neven if the optimizer claims to have found a solution, we check if the gradient is (almost) zero, and warn if not; this check can be turned on/off by the option check.gradient = TRUE/FALSE\nmore effort is done to check if the model is identified in the presence of equality constraints; a warning is given if vcov is (nearly) singular; this check can be turned on/off by the option check.vcov = TRUE/FALSE\nheader of the summary() function now shows the optimizer, the number of free parameters, and the number of constraints (if any)\nfabin3 starting values for factor loadings are now also computed if std.lv = TRUE\n\nKnown issues:\n\nsame as 0.6-1\n\nBugs/glitches discovered after the release:\n\nifi.scaled fit measure was not scaled\nlavTables() did not work if the first argument was a data.frame\ntwo-level + optim.method = “em” resulted in an error (about the check argument)\nmodindices() did not work if conditional.x = TRUE\nlavInspect(, “data”) did not return covariates if conditional.x = TRUE\n\n\n\n\nVersion 0.6-1\n\nReleased on CRAN: 22 May 2018\nNew features and user-visible changes:\n\ninitial support for two-level SEM with random intercepts; see example(Demo.twolevel)\ninitial support for sampling weights (for non-clustered data only for now)\nthe code to compute (robust) standard errors and (robust) test statistics has been rewritten; the code is now much more consistent, but this may result in small changes in the values of some robust test statistics as printed in the output of summary(); a meanstructure is no longer added automatically when switching to a robust estimator\nconditional.x = FALSE now works in the categorical case (both with estimators DWLS and PML)\nif fixed.x = TRUE, we compute the loglikelihood without the exogenous covariates, and we do not allow for missing values in the exogenous covariates when missing = “ml” (and fixed.x = TRUE)\nestimator = “PML” now works for continuous-only data, or mixed continuous/ordinal data\nlavTestLRT(, method = “satorra2000”) which is the default when comparing models that were fitted with estimator MLMV or WLSMV now uses the so-called ‘delta’ method by default; this allows for comparing models that are nested in the covariance sense (and not just in the parameter sense); in addition, a scaled.shifted test statistic will be used by default\nthe warning about empty cells in bivariate cells (when categorical data is used) is no longer shown\nmany, many small changes under the hood\n\nKnown issues:\n\ntwo-level SEM: no random slopes, no missing data, no categorical data\nthe marginal ML infrastructure (estimator = “MML”) has not been updated yet\nseveral github issues have not been resolved yet\n\nBugs/glitches discovered after the release:\n\nrobust CFI/TLI and robust RMSEA values are printed as NA when estimator = “MLR”\nlavPredict(, level = 2) does not handle phantom latent variables properly"
  },
  {
    "objectID": "history/dot3.html",
    "href": "history/dot3.html",
    "title": "0.3 series",
    "section": "",
    "text": "Version 0.3-3\n\nReleased on CRAN: 19 Januari 2011\nonly a fix for a missing link in the documentation\n\n\n\nVersion 0.3-1\n\nReleased on CRAN: 11 May 2010\nNew features/changes for this version (compared to the older program semplus that was never released on CRAN):\n\nname of the package has changed to ‘lavaan’\n‘ML.N’ option is replaced by a ‘mimic.Mplus’ option\nif do.fit=FALSE, a full summary (including standard errors) is now available\nif a correlation matrix is supplied (instead of a covariance matrix), only a (big) warning is now spit out (instead of an error and stopping)\nmodel syntax can now be specified as a string literal enclosed in single quotes\nmultiple values are now accepted within pre-multiplication commands when analyzing multiple groups\nin a multiple group analysis, the sample moments can be provided using a list\nusing NA*x in a formula forces the corresponding parameter to be free\na new modifier ‘label’ can now be used to specify custom labels\nadded ‘information’ argument\nif na.rm=FALSE and estimator=“ML”, full information ML (FIML) is used\n\nKnown issues for this release:\n\nMLM values are different in Mplus (but same as in EQS)\nSRMR values are sometimes different in Mplus\nEPCs for equality constraints are wrong\n\nBugs/glitches discovered after the release:\n\nIf the data frame contained cases where all values were missing, this produced an error\nIn mimic models with a single covariate, the baseline chi-square test statistic was not computed correctly, and the standardized solution gave an error\nIf an observed or latent variance (for example x1 ~~ x1 ) was included in the model syntax without a starting value or a fixed value, the starting value was set to zero\nlavaan could not handle some non-standard models; for example: latent variables where the indicators are a mixture of latent and observed variables; indicators that are also predictors in a regression\nlavaan could not handle a model with latent variables and a dependent observed-only variable (for example y ~ f1 + f2 + f3 where f1, f2 and f3 are latent variables, but y is an observed variable)"
  },
  {
    "objectID": "history/index.html",
    "href": "history/index.html",
    "title": "Version History",
    "section": "",
    "text": "Reproducibility of scientific results is important. In this secion, we keep a record of all versions of lavaan that have been released on CRAN. For each version, we briefly list the new features that were introduced in that version, and (most importantly) the bugs and issues that were reported for this version.\nVersion history:\n\nlavaan 0.6 series\nlavaan 0.5 series\nlavaan 0.4 series\nlavaan 0.3 series"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Getting Started",
    "section": "",
    "text": "For the web application, no installation is necessary. Simply go to https://lavaangui.org"
  },
  {
    "objectID": "installation.html#installation",
    "href": "installation.html#installation",
    "title": "Getting Started",
    "section": "Installation",
    "text": "Installation\nYou can install the latest version of the R package via the following commands.\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"karchjd\\lavaangui\")"
  },
  {
    "objectID": "installation.html#start_gui",
    "href": "installation.html#start_gui",
    "title": "Getting Started",
    "section": "start_gui",
    "text": "start_gui\nYou can start the lavaangui web application by typing\n\nstart_gui()\n\ninto your R console.\nAlternatively, you can also use the command start_gui(fit), where fit is any supported fitted lavaan object. This will intialze the web application with the model and data contained in fit"
  },
  {
    "objectID": "installation.html#plot_interactive",
    "href": "installation.html#plot_interactive",
    "title": "Getting Started",
    "section": "plot_interactive",
    "text": "plot_interactive\nIf you only want an interactive visualization of your fitted lavaan model, we recommend the plot_interactive(fit) function. This disables all facilities of modifying or refitting the model and if you are using Rstudio displays the model directly in Rstudio."
  },
  {
    "objectID": "tutorial/installation.html",
    "href": "tutorial/installation.html",
    "title": "Getting Started",
    "section": "",
    "text": "For the web application, no installation is necessary. Simply go to https://lavaangui.org. The web application requires a modern browser but unfortunately does not work with Safari. It is continuously being tested on Chrome, Firefox, and Edge. It has been most extensively tested using Chrome, which we recommend if you have the choice."
  },
  {
    "objectID": "tutorial/installation.html#installation",
    "href": "tutorial/installation.html#installation",
    "title": "Getting Started",
    "section": "Installation",
    "text": "Installation\nYou can install the latest version of the R package via the following commands.\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"karchjd\\lavaangui\")\n\nYou will also need a modern web browser, which typically should already be installed on your system. However, note that Safari is not supported, as explained in Section 1."
  },
  {
    "objectID": "tutorial/installation.html#start_gui",
    "href": "tutorial/installation.html#start_gui",
    "title": "Getting Started",
    "section": "start_gui",
    "text": "start_gui\nYou can start the lavaangui web application by typing\n\nstart_gui()\n\ninto your R console.\nAlternatively, you can also use the command start_gui(fit), where fit is any supported fitted lavaan object. This will initialize the web application with the model and data contained in fit. For example, the following code initializes the web application with a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nstart_gui(fit)"
  },
  {
    "objectID": "tutorial/installation.html#plot_interactive",
    "href": "tutorial/installation.html#plot_interactive",
    "title": "Getting Started",
    "section": "plot_interactive",
    "text": "plot_interactive\nIf you only want an interactive visualization of your fitted lavaan model, we recommend the plot_interactive(fit) function. This disables all facilities of modifying or refitting the model and if you are using Rstudio displays the model directly in Rstudio. For example, the following code plots a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nplot_interactive(fit)"
  },
  {
    "objectID": "tutorial/loading_data.html#data-editor",
    "href": "tutorial/loading_data.html#data-editor",
    "title": "Loading Data",
    "section": "Data Editor",
    "text": "Data Editor\nAfter loading the data, we recommend checking that the data has been loaded correctly. For this, go to the Data Editor. You can reach it via File &gt; Data Editor. In the Data Editor, you will see a table describing your data. Verify that these summary statistics align with your expectations, particularly for the variables you intend to model.\nMuch like lavaan, lavaangui identifies observed variables in your model by their names. Thus, please make sure to rename the variables you intend to model such that they have the desired names. You can accomplish this within the Data Editor by altering the variable names. The change will be immediate. There is no need to confirm this."
  },
  {
    "objectID": "tutorial/model_specification.html#creating-variablesnodes",
    "href": "tutorial/model_specification.html#creating-variablesnodes",
    "title": "Model Specification",
    "section": "Creating Variables/Nodes",
    "text": "Creating Variables/Nodes\nlavaangui supports the 3 types of variables typically contained in a SEM: observed variables, latent variables, and the constant variable, represented as square, circle, or triangle, respectively.\nThere are three ways to create variables\n\nDrag and drop the respective symbol from the Top Toolbox onto the Model Window.\nRight-clicking at any empty space within the Model Window and selecting the desired variable type from the context menu. This will create a corresponding variable at the cursor location.\nPressing either, “o” (observed variable), “l” (latent variable), or “c” (constant) variable, while hovering with the mouse over the Model Window. This also creates a corresponding variable at the cursor location."
  },
  {
    "objectID": "tutorial/model_specification.html#arrows",
    "href": "tutorial/model_specification.html#arrows",
    "title": "Model Specification",
    "section": "Arrows",
    "text": "Arrows\nRegression relationships between variables are represented by directed arrows, whereas variances and covariance relationships are represented by undirected arrows. To draw a direct arrow, press and hold the CTRL key and drag the mouse from one variable (the start of the arrow) to another (the end of the arrow). If you hold the SHIFT instead of the CTRL key, you create an undirected arrow instead.\nThe context menu of an arrow, reachable by right-clicking on the arrow, contains arrow-related operations: You can decide whether the path coefficient should be fixed (Fix Parameter), declare a parameter to be freely estimated (Free Parameter) or force it to be estimated (Force Free Parameter). Visually a free arrow is displayed as a normal arrow, a fixed arrow contains @x as the label, where x is the value it is fixed to, and a “forced free” arrow is blue. The difference between a free parameter and a “forced free” parameter is that the latter prevents lavaan from fixing the parameter, as would for example be the case if the parameter would correspond to the first loading of a latent factor. You can also revert the direction of an arrow (Revert Direction), set a directed arrow to undirected (Set Undirected), or set an undirected arrow to directed (Set Directed). Another important operation is to give a path coefficient a label, which is reachable via Add/Change Label. Two path coefficients with the same label will be constrained to be equal during estimation."
  },
  {
    "objectID": "tutorial/model_specification.html#model-autocomplete",
    "href": "tutorial/model_specification.html#model-autocomplete",
    "title": "Model Specification",
    "section": "Model Autocomplete",
    "text": "Model Autocomplete\nlavaangui relies on lavaan to augment the model specified by you such that it can be fit. Thus, almost always, the model you draw is not exactly the model that will be fitted. Before fitting the model, I thus recommend that you inspect the model that actually will be fit. You can do this by pressing the button Show Full Model in the bottom toolbar. In the resulting model, paths that are added or modified by lavaan are displayed as dashed lines.\nYou can control what is added to your model via the Automatically.. menu."
  },
  {
    "objectID": "tutorial/overview.html",
    "href": "tutorial/overview.html",
    "title": "Overview",
    "section": "",
    "text": "If you start the app via start_gui or visit https://solo-fsw.shinyapps.io/lavaangui/, the app will look like shown in the picture below. The text below describes it’s components. You can click on the image to enlarge it.\n\n\n\nOverview\n\n\n\n\nIn the Main Menu, you can do most of the actions that are not directly related to specifying the model. This includes, loading and saving data or models, changing the settings of lavaan, changing how your model is displayed, applying layouts to your model and getting help.\n\n\n\nThe most important function of the Top Toolbar is to enable you to create new variables by dragging the respective symbol into the model window. Besides this, it also displays which data set is currently loaded, and whether means are modeled or not.\n\n\n\nIn the Model Window, you specify your model and can inspect the estimated parameters as well as their p values and confidence intervals after you fitted your model.\n\n\n\nAfter fitting a model, the Results Window shows results such as model fit indices. The results window is also used to display the lavaan script that corresponds to your model.\n\n\n\nIn the Message Area, you will get messages from the app such as warnings, error messages but also success messages.\n\n\n\nThe Bottom Toolbar allows you to fit the model but also to show the full model as if it will be fitted by lavaan before fitting."
  },
  {
    "objectID": "contribute.html#feature-requests",
    "href": "contribute.html#feature-requests",
    "title": "Contribute",
    "section": "",
    "text": "An easy way to contribute is to request a new feature that you need for your work. To do this, please use https://github.com/karchjd/lavaangui/issues."
  },
  {
    "objectID": "contribute.html#recommended-ides",
    "href": "contribute.html#recommended-ides",
    "title": "Contribute",
    "section": "Recommended IDEs",
    "text": "Recommended IDEs\nFor the frontend and the end-to-end tests, I have used Visual Studio and for the backend R Studio."
  },
  {
    "objectID": "tutorial/overview.html#main-menu",
    "href": "tutorial/overview.html#main-menu",
    "title": "Overview",
    "section": "",
    "text": "In the Main Menu, you can do most of the actions that are not directly related to specifying the model. This includes, loading and saving data or models, changing the settings of lavaan, changing how your model is displayed, applying layouts to your model and getting help."
  },
  {
    "objectID": "tutorial/overview.html#top-toolbar",
    "href": "tutorial/overview.html#top-toolbar",
    "title": "Overview",
    "section": "",
    "text": "The most important function of the Top Toolbar is to enable you to create new variables by dragging the respective symbol into the model window. Besides this, it also displays which data set is currently loaded, and whether means are modeled or not."
  },
  {
    "objectID": "tutorial/overview.html#model-window",
    "href": "tutorial/overview.html#model-window",
    "title": "Overview",
    "section": "",
    "text": "In the Model Window, you specify your model and can inspect the estimated parameters as well as their p values and confidence intervals after you fitted your model."
  },
  {
    "objectID": "tutorial/overview.html#results-window",
    "href": "tutorial/overview.html#results-window",
    "title": "Overview",
    "section": "",
    "text": "After fitting a model, the Results Window shows results such as model fit indices. The results window is also used to display the lavaan script that corresponds to your model."
  },
  {
    "objectID": "tutorial/overview.html#message-area",
    "href": "tutorial/overview.html#message-area",
    "title": "Overview",
    "section": "",
    "text": "In the Message Area, you will get messages from the app such as warnings, error messages but also success messages."
  },
  {
    "objectID": "tutorial/overview.html#bottom-toolbar",
    "href": "tutorial/overview.html#bottom-toolbar",
    "title": "Overview",
    "section": "",
    "text": "The Bottom Toolbar allows you to fit the model but also to show the full model as if it will be fitted by lavaan before fitting."
  },
  {
    "objectID": "index.html#web-application",
    "href": "index.html#web-application",
    "title": "lavaangui",
    "section": "Web application",
    "text": "Web application\nFor the web application, no installation is necessary. Simply go to https://solo-fsw.shinyapps.io/lavaangui/. The web application requires a modern browser. It is continuously being tested on Chrome, Firefox, and Edge, which I thus recommend. It unfortunately does not work with Safari due to Apples reluctance to support many modern web features."
  },
  {
    "objectID": "index.html#r-package",
    "href": "index.html#r-package",
    "title": "lavaangui",
    "section": "R Package",
    "text": "R Package\n\nInstallation\nYou can install the latest version of the R package via the following commands.\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"karchjd\\lavaangui\")\n\nYou will also need a modern web browser, which typically should already be installed on your system. However, note that Safari is not supported, as explained earlier.\n\n\nstart_gui\nYou can start the lavaangui web application by typing\n\nstart_gui()\n\ninto your R console.\nAlternatively, you can also use the command start_gui(fit), where fit is any supported fitted lavaan object. This will initialize the web application with the model and data contained in fit. For example, the following code initializes the web application with a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nstart_gui(fit)\n\n\n\nplot_interactive\nTo obtain an interactive plot of your fitted model, use the plot_interactive(fit) function:\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nplot_interactive(fit)"
  },
  {
    "objectID": "index.html#start_gui",
    "href": "index.html#start_gui",
    "title": "About lavaangui",
    "section": "start_gui",
    "text": "start_gui\nYou can start the lavaangui web application by typing\n\nstart_gui()\n\ninto your R console.\nAlternatively, you can also use the command start_gui(fit), where fit is any supported fitted lavaan object. This will initialize the web application with the model and data contained in fit. For example, the following code initializes the web application with a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nstart_gui(fit)"
  },
  {
    "objectID": "index.html#plot_interactive",
    "href": "index.html#plot_interactive",
    "title": "About lavaangui",
    "section": "plot_interactive",
    "text": "plot_interactive\nTo obtain an interactive plot of your fitted model, use the plot_interactive(fit) function:\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nplot_interactive(fit)"
  },
  {
    "objectID": "tutorial/loading_data.html#loading-data",
    "href": "tutorial/loading_data.html#loading-data",
    "title": "Loading Data",
    "section": "",
    "text": "To load data, navigate to File &gt; Load Data in the Main Menu and select the file that contains your data. Supported formats are .xlsx, .sav, .rds, and .csv. Ensure that your data file contains a table of data.\nIf you just want to try lavaangui, you can use cfa.csv. This is a ‘classical’ dataset commonly used in many papers and books on structural equation modeling. See the lavaan tutorial for more information.\nCurrently, your .csv file must have the same format as cfa.csv. That is, the first row must contain variable names, columns are separated by ,, and the decimal delimiter is .."
  },
  {
    "objectID": "tutorial/model_specification.html",
    "href": "tutorial/model_specification.html",
    "title": "Model Specification",
    "section": "",
    "text": "As is typical in latent variable modeling, a model is specified by creating a set of nodes, which represent the variables, and connecting those with arrows, which represent the hypothesized relationships between the variables."
  },
  {
    "objectID": "tutorial/fitting.html#show-full-model",
    "href": "tutorial/fitting.html#show-full-model",
    "title": "Model Fitting",
    "section": "",
    "text": "To fit a SEM, you first need to make sure that each observed variable in the model is linked with a variable in the data set. Before fitting the model, I recommend that you ensure that the model is exactly what you want. This is especially important for lavaangui because it automatically adds many arrows. So, the model you specify is almost always not the exactly the same model that is fitted by lavaan.\nTo obtain the model lavaan will use, press on the Show Full Model button in the Bottom Toolbar. This will add all the arrows lavaan automatically adds to your model and fixes all parameters lavaan will fix. All arrows added or modified are displayed as dashed arrows."
  },
  {
    "objectID": "tutorial/result.html#view-menu",
    "href": "tutorial/result.html#view-menu",
    "title": "Inspecting Results",
    "section": "View Menu",
    "text": "View Menu\nIn the View Menu, you can modify how the model is displayed. First, you can toggle Arrows Created by Lavaan and Variance Arrows on or off. Second, you can decide whether to show Standardized Estimates or not. Third, you can select what estimates should be displayed: Estimate only, Confidence Interval, Estimate + p-values, or Estimate + Standard Error."
  },
  {
    "objectID": "tutorial/appearance.html#changing-variance-arrows",
    "href": "tutorial/appearance.html#changing-variance-arrows",
    "title": "Changing Diagram Appearance",
    "section": "Changing Variance Arrows",
    "text": "Changing Variance Arrows\nlavaangui attempts to automatically find optimal positions for variance arrows to avoid overlap with other arrows. However, this may not yield satisfactory results for all models. You can manually position a variance loop through its context menu (Change/Fix Loop Orientation). Similarly, you can free the loop orientation (Free Loop Orientation) to allow lavaangui to automatically seek the best orientation again."
  },
  {
    "objectID": "tutorial/help..html",
    "href": "tutorial/help..html",
    "title": "Getting Help",
    "section": "",
    "text": "If you need help, please open an issue at https://github.com/karchjd/lavaangui/issues or email me directly (j.d.karch@fsw.leidenuniv.nl).\nThe same applies if you think you have found a bug, or if you have a suggestion for improvement. If you report a bug, always provide a minimal reproducible example. In the case of lavaangui this is typically a minimal set of interactions with the app that causes the erorr."
  },
  {
    "objectID": "tutorial/help.html",
    "href": "tutorial/help.html",
    "title": "Getting Help",
    "section": "",
    "text": "Help\nIf you need help, please open an issue at https://github.com/karchjd/lavaangui/issues or email me directly.\n\n\nBug\nThe same applies if you think you have found a bug, or if you have a suggestion for improvement. If you report a bug, always provide a minimal reproducible example. In the case of lavaangui this is typically a minimal set of interactions with the app that causes the erorr."
  },
  {
    "objectID": "tutorial/help.html#installation",
    "href": "tutorial/help.html#installation",
    "title": "Getting Started",
    "section": "Installation",
    "text": "Installation\nYou can install the latest version of the R package via the following commands.\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"karchjd\\lavaangui\")\n\nYou will also need a modern web browser, which typically should already be installed on your system. However, note that Safari is not supported, as explained in Section 1."
  },
  {
    "objectID": "tutorial/help.html#start_gui",
    "href": "tutorial/help.html#start_gui",
    "title": "Getting Started",
    "section": "start_gui",
    "text": "start_gui\nYou can start the lavaangui web application by typing\n\nstart_gui()\n\ninto your R console.\nAlternatively, you can also use the command start_gui(fit), where fit is any supported fitted lavaan object. This will initialize the web application with the model and data contained in fit. For example, the following code initializes the web application with a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nstart_gui(fit)"
  },
  {
    "objectID": "tutorial/help.html#plot_interactive",
    "href": "tutorial/help.html#plot_interactive",
    "title": "Getting Started",
    "section": "plot_interactive",
    "text": "plot_interactive\nIf you only want an interactive visualization of your fitted lavaan model, we recommend the plot_interactive(fit) function. This disables all facilities of modifying or refitting the model and if you are using Rstudio displays the model directly in Rstudio. For example, the following code plots a three factor model.\n\nlibrary(lavaan)\nHS.model &lt;- ' visual  =~ x1 + x2 + x3\n              textual =~ x4 + x5 + x6\n              speed   =~ x7 + x8 + x9 '\n\nfit &lt;- cfa(HS.model, data = HolzingerSwineford1939)\nplot_interactive(fit)"
  },
  {
    "objectID": "tutorial/result.html#results-window",
    "href": "tutorial/result.html#results-window",
    "title": "Inspecting Results",
    "section": "Results Window",
    "text": "Results Window\nIn the Results Window, all other results are shown. The first section under $summary contains the model summary by lavaan. See the lavaan documentation for an explanation. The second section under $estimates contains the parameter estimates in the form of a table. See the lavaan documentation for an explanation of the table."
  },
  {
    "objectID": "tutorial/save.html#exporting-diagram",
    "href": "tutorial/save.html#exporting-diagram",
    "title": "Exporting and Saving a Model",
    "section": "Exporting Diagram",
    "text": "Exporting Diagram\nThere are two options to export the diagram to a picture: File &gt; Export Diagram to PNG and File &gt; Export Diagram to JPG"
  },
  {
    "objectID": "tutorial/save.html#saving-the-model",
    "href": "tutorial/save.html#saving-the-model",
    "title": "Saving and Exporting",
    "section": "Saving the Model",
    "text": "Saving the Model\nTo save the analysis (model and data), use the option File &gt; Download Model and Data. To reload the analysis in the future, use File &gt; Load Model and Data. It’s also possible to save only the model via File &gt; Download Model and load it later using File &gt; Load Model."
  },
  {
    "objectID": "tutorial/save.html#exporting-the-diagram",
    "href": "tutorial/save.html#exporting-the-diagram",
    "title": "Saving and Exporting",
    "section": "Exporting the Diagram",
    "text": "Exporting the Diagram\nThere are two options for exporting the diagram as an image: File &gt; Export Diagram to PNG and File &gt; Export Diagram to JPG."
  }
]